//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _RootShaderParameters
// {
//
//   uint LightIndex;                   // Offset:  128 Size:     4
//   uint ViewIndex;                    // Offset:  132 Size:     4
//   uint NumViews;                     // Offset:  136 Size:     4
//   uint DummyZeroForFixingShaderCompilerBug;// Offset:  140 Size:     4 [unused]
//   uint NumSceneObjects;              // Offset:  176 Size:     4 [unused]
//   uint NumSceneHeightfieldObjects;   // Offset:  200 Size:     4 [unused]
//   uint2 ShadowTileListGroupSize;     // Offset:  296 Size:     8 [unused]
//   uint ShadowMaxObjectsPerTile;      // Offset:  304 Size:     4 [unused]
//   float3 DistanceFieldBrickSize;     // Offset:  368 Size:    12 [unused]
//   float3 DistanceFieldUniqueDataBrickSize;// Offset:  384 Size:    12 [unused]
//   uint3 DistanceFieldBrickAtlasSizeInBricks;// Offset:  400 Size:    12 [unused]
//   uint3 DistanceFieldBrickAtlasMask; // Offset:  416 Size:    12 [unused]
//   uint3 DistanceFieldBrickAtlasSizeLog2;// Offset:  432 Size:    12 [unused]
//   float3 DistanceFieldBrickAtlasTexelSize;// Offset:  448 Size:    12 [unused]
//   float3 DistanceFieldBrickAtlasHalfTexelSize;// Offset:  464 Size:    12 [unused]
//   float3 DistanceFieldBrickOffsetToAtlasUVScale;// Offset:  480 Size:    12 [unused]
//   float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;// Offset:  496 Size:    12 [unused]
//   row_major float4x4 TranslatedWorldToShadow;// Offset:  512 Size:    64 [unused]
//   float TwoSidedMeshDistanceBiasScale;// Offset:  576 Size:     4 [unused]
//   float MaxTraceDistance;            // Offset:  588 Size:     4 [unused]
//   float MeshSDFShadowRayBias;        // Offset:  592 Size:     4 [unused]
//   float HeightfieldShadowRayBias;    // Offset:  596 Size:     4 [unused]
//   float GlobalSDFShadowRayBias;      // Offset:  600 Size:     4 [unused]
//   int HeightfieldMaxTracingSteps;    // Offset:  604 Size:     4 [unused]
//
// }
//
// Resource bind info for LightTileOffsetsPerLight
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for RWShadowMaskTiles
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LightTileOffsetsPerLight          texture  struct         r/o             t0      1 
// RWShadowMaskTiles                     UAV  struct         r/w             u0      1 
// _RootShaderParameters             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[9], immediateIndexed
dcl_resource_structured t0, 4
dcl_uav_structured u0, 4
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 3
dcl_tgsm_structured g0, 4, 16
dcl_thread_group 8, 8, 1
imad r0.x, vThreadIDInGroup.y, l(8), vThreadIDInGroup.x
imad r0.y, cb0[8].x, cb0[8].z, cb0[8].y
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.y, r0.y, l(0), t0.xxxx
iadd r0.y, r0.y, vThreadGroupID.x
ult r0.z, r0.x, l(16)
if_nz r0.z
  ishl r0.w, r0.y, l(4)
  iadd r0.w, r0.x, r0.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.w, r0.w, l(0), u0.xxxx
  store_structured g0.x, r0.x, l(0), r0.w
endif 
sync_g_t
ubfe r1.x, l(27), l(2), r0.x
ld_structured r0.w, r1.x, l(0), g0.xxxx
bfi r1.z, l(2), l(3), r0.x, l(0)
ushr r0.w, r0.w, r1.z
and r1.w, r0.w, l(128)
if_z r1.w
  and r0.w, r0.w, l(127)
  utof r0.w, r0.w
  mul r0.w, r0.w, l(1.000000)
  ftou r0.w, r0.w
  ishl r2.xy, l(255, 128, 0, 0), r1.zzzz
  not r1.w, r2.x
  mov r1.y, l(0)
  atomic_and g0, r1.xyxx, r1.w
  bfi r0.w, l(7), r1.z, r0.w, r2.y
  atomic_or g0, r1.xyxx, r0.w
endif 
sync_g_t
if_nz r0.z
  ishl r0.y, r0.y, l(4)
  iadd r0.y, r0.x, r0.y
  ld_structured r0.x, r0.x, l(0), g0.xxxx
  store_structured u0.x, r0.y, l(0), r0.x
endif 
ret 
// Approximately 37 instruction slots used
