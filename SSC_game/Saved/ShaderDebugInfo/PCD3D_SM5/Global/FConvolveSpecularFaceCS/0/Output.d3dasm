//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _RootShaderParameters
// {
//
//   uint MipIndex;                     // Offset:    0 Size:     4
//   uint NumMips;                      // Offset:    4 Size:     4
//   int CubeFaceOffset;                // Offset:    8 Size:     4
//   int CubeFace;                      // Offset:   12 Size:     4 [unused]
//   int FaceThreadGroupSize;           // Offset:   16 Size:     4
//   int2 ValidDispatchCoord;           // Offset:   24 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SourceCubemapSampler              sampler      NA          NA             s0      1 
// SourceCubemapTexture              texture  float4        cube             t0      1 
// OutTextureMipColor                    UAV  float4     2darray             u0      1 
// _RootShaderParameters             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_uav_typed_texture2darray (float,float,float,float) u0
dcl_input vThreadID.xy
dcl_temps 11
dcl_thread_group 8, 8, 1
udiv null, r0.x, vThreadID.x, cb0[1].x
mov r0.y, vThreadID.y
uge r1.xy, r0.xyxx, cb0[1].zwzz
or r1.x, r1.y, r1.x
if_nz r1.x
  ret 
endif 
xor r1.x, vThreadID.x, cb0[1].x
imax r1.y, cb0[1].x, -cb0[1].x
udiv r1.y, null, vThreadID.x, r1.y
ineg r1.z, r1.y
and r1.x, r1.x, l(0x80000000)
movc r1.x, r1.x, r1.z, r1.y
iadd r0.zw, r1.xxxx, cb0[0].zzzz
utof r1.xy, r0.xyxx
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
itof r1.zw, cb0[1].zzzw
div r1.xy, r1.xyxx, r1.zwzz
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
ieq r2.xyzw, r0.wwww, l(1, 2, 3, 4)
mov r1.z, -r1.y
mov r1.w, l(1.000000)
mul r3.xy, r1.xzxx, l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r3.z, l(-1.000000)
movc r3.xyz, r2.wwww, r1.xzwx, r3.xyzx
mov r4.yz, r1.zzxz
mov r4.x, l(-1.000000)
movc r3.xyz, r2.zzzz, r4.zxyz, r3.xyzx
movc r2.yzw, r2.yyyy, r1.xxwy, r3.xxyz
movc r2.xyz, r2.xxxx, r4.xyzx, r2.yzwy
mul r1.xyz, r1.wzxw, l(1.000000, 1.000000, -1.000000, 0.000000)
movc r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
utof r1.w, cb0[0].x
iadd r2.x, l(-1), cb0[0].y
utof r2.y, r2.x
add r2.y, r2.y, l(-1.000000)
add r1.w, -r1.w, r2.y
add r1.w, -r1.w, l(1.000000)
mul r1.w, r1.w, l(0.833333)
exp r1.w, r1.w
lt r2.y, r1.w, l(0.010000)
if_nz r2.y
  sample_l_indexable(texturecube)(float,float,float,float) r3.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
  min r3.xyzw, -r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  mov r3.xyzw, -r3.xyzw
  store_uav_typed u0.xyzw, r0.xyww, r3.xyzw
  ret 
endif 
dp3 r2.y, r1.xyzx, r1.xyzx
rsq r2.y, r2.y
mul r3.xyz, r1.xyzx, r2.yyyy
ge r1.x, r3.z, l(0.000000)
movc r1.xy, r1.xxxx, l(1.000000,-1.000000,0,0), l(-1.000000,1.000000,0,0)
mad r1.z, r1.z, r2.y, r1.x
rcp r1.z, r1.z
mul r2.yzw, r3.yyxy, r3.xxxy
mul r4.y, -r1.z, r2.y
mul r2.y, -r1.z, r1.x
mad r4.x, r2.y, r2.z, l(1.000000)
mul r5.x, r1.x, r4.y
mul r6.x, r3.x, r1.y
mad r5.y, r2.w, -r1.z, r1.x
ishl r1.xy, l(1, 6, 0, 0), r2.xxxx
imul null, r1.x, r1.x, r1.y
utof r1.x, r1.x
div r1.x, l(12.566371), r1.x
add r1.x, r1.x, r1.x
lt r1.y, r1.w, l(0.100000)
movc r1.z, r1.y, l(32), l(64)
lt r2.x, l(0.990000), r1.w
if_nz r2.x
  mov r4.w, r3.x
  mov r5.z, r3.y
  mul r6.yz, r3.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
  mov r2.xyzw, l(0,0,0,0)
  mov r3.w, l(0)
  loop 
    uge r6.w, r3.w, r1.z
    breakc_nz r6.w
    utof r6.w, r3.w
    mul r6.w, r6.w, l(0.015625)
    frc r6.w, r6.w
    bfrev r7.x, r3.w
    xor r7.x, r7.x, l(0)
    utof r7.x, r7.x
    mul r7.y, r7.x, l(0.000000)
    mul r6.w, r6.w, l(6.283185)
    sqrt r8.z, r7.y
    mad r7.x, -r7.x, l(0.000000), l(1.000000)
    sqrt r7.x, r7.x
    sincos r9.x, r10.x, r6.w
    mul r8.x, r7.x, r10.x
    mul r8.y, r7.x, r9.x
    mul r6.w, r8.z, l(20.371832)
    div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
    div r6.w, r6.w, r1.x
    log r6.w, r6.w
    mul r6.w, r6.w, l(0.500000)
    dp3 r7.x, r8.xyzx, r4.xywx
    dp3 r7.y, r8.xyzx, r5.xyzx
    dp3 r7.z, r8.xyzx, r6.xyzx
    sample_l_indexable(texturecube)(float,float,float,float) r7.xyzw, r7.xyzx, t0.xyzw, s0, r6.w
    add r2.xyzw, r2.xyzw, r7.xyzw
    iadd r3.w, r3.w, l(1)
  endloop 
  mul r2.xyzw, r2.xyzw, l(0.015625, 0.015625, 0.015625, 0.015625)
else 
  movc r1.y, r1.y, l(32.000000), l(64.000000)
  mul r1.w, r1.w, r1.w
  mul r3.w, r1.w, r1.w
  mad r1.w, r1.w, r1.w, l(-1.000000)
  mov r4.z, r3.x
  mov r5.w, r3.y
  mul r6.yz, r3.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
  mov r7.xyzw, l(0,0,0,0)
  mov r3.xy, l(0,0,0,0)
  loop 
    uge r3.z, r3.y, r1.z
    breakc_nz r3.z
    utof r3.z, r3.y
    div r3.z, r3.z, r1.y
    frc r3.z, r3.z
    bfrev r4.w, r3.y
    xor r4.w, r4.w, l(0)
    utof r4.w, r4.w
    mul r5.z, r4.w, l(0.000000)
    mul r3.z, r3.z, l(6.283185)
    mad r4.w, -r4.w, l(0.000000), l(1.000000)
    mad r5.z, r1.w, r5.z, l(1.000000)
    div r4.w, r4.w, r5.z
    sqrt r8.z, r4.w
    add r4.w, -r4.w, l(1.000000)
    sqrt r4.w, r4.w
    sincos r9.x, r10.x, r3.z
    mul r8.x, r4.w, r10.x
    mul r8.y, r4.w, r9.x
    add r3.z, r8.z, r8.z
    mad r8.xyw, r3.zzzz, r8.xyxz, l(-0.000000, -0.000000, 0.000000, -1.000000)
    lt r3.z, l(0.000000), r8.w
    if_nz r3.z
      mad r3.z, r8.z, r3.w, -r8.z
      mad r3.z, r3.z, r8.z, l(1.000000)
      mul r3.z, r3.z, r3.z
      mul r3.z, r3.z, l(3.141593)
      div r3.z, r3.w, r3.z
      mul r3.z, r1.y, r3.z
      mul r3.z, r3.z, l(0.250000)
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
      div r3.z, r3.z, r1.x
      log r3.z, r3.z
      mul r3.z, r3.z, l(0.500000)
      dp3 r9.x, r8.xywx, r4.xyzx
      dp3 r9.y, r8.xywx, r5.xywx
      dp3 r9.z, r8.xywx, r6.xyzx
      sample_l_indexable(texturecube)(float,float,float,float) r9.xyzw, r9.xyzx, t0.xyzw, s0, r3.z
      mad r7.xyzw, r9.xyzw, r8.wwww, r7.xyzw
      add r3.x, r3.x, r8.w
    endif 
    iadd r3.y, r3.y, l(1)
  endloop 
  div r2.xyzw, r7.xyzw, r3.xxxx
endif 
min r1.xyzw, -r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mov r1.xyzw, -r1.xyzw
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 166 instruction slots used
