;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                4   xyzw        4   TARGET   float   xyzw
; SV_Target                6   xyzw        6   TARGET   float   xyzw
;
; shader hash: 851defe6c2b2642a74efdcfd61ecd53d
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                4                              
; SV_Target                6                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_OpaqueBasePass
; {
;
;   struct hostlayout.UniformBufferConstants_OpaqueBasePass
;   {
;
;       uint OpaqueBasePass_Shared_Forward_NumLocalLights;; Offset:    0
;       uint OpaqueBasePass_Shared_Forward_NumReflectionCaptures;; Offset:    4
;       uint OpaqueBasePass_Shared_Forward_HasDirectionalLight;; Offset:    8
;       uint OpaqueBasePass_Shared_Forward_NumGridCells;; Offset:   12
;       int3 OpaqueBasePass_Shared_Forward_CulledGridSize;; Offset:   16
;       uint OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;; Offset:   28
;       uint OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_OpaqueBasePass_Shared_Forward_36;; Offset:   36
;       uint PrePadding_OpaqueBasePass_Shared_Forward_40;; Offset:   40
;       uint PrePadding_OpaqueBasePass_Shared_Forward_44;; Offset:   44
;       float3 OpaqueBasePass_Shared_Forward_LightGridZParams;; Offset:   48
;       float PrePadding_OpaqueBasePass_Shared_Forward_60;; Offset:   60
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightDirection;; Offset:   64
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;; Offset:   76
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightColor;; Offset:   80
;       float OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_OpaqueBasePass_Shared_Forward_100;; Offset:  100
;       float2 OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;; Offset:  112
;       int OpaqueBasePass_Shared_Forward_DirectionalLightVSM;; Offset:  116
;       int PrePadding_OpaqueBasePass_Shared_Forward_120;; Offset:  120
;       int PrePadding_OpaqueBasePass_Shared_Forward_124;; Offset:  124
;       float4 OpaqueBasePass_Shared_Forward_CascadeEndDepths;; Offset:  128
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;; Offset:  480
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;; Offset:  488
;       uint OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_OpaqueBasePass_Shared_Forward_500;; Offset:  500
;       uint PrePadding_OpaqueBasePass_Shared_Forward_504;; Offset:  504
;       uint PrePadding_OpaqueBasePass_Shared_Forward_508;; Offset:  508
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;; Offset:  592
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;; Offset:  604
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_OpaqueBasePass_Shared_Forward_644;; Offset:  644
;       uint PrePadding_OpaqueBasePass_Shared_Forward_648;; Offset:  648
;       uint PrePadding_OpaqueBasePass_Shared_Forward_652;; Offset:  652
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_OpaqueBasePass_Shared_Forward_660;; Offset:  660
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler;; Offset:  664
;       uint PrePadding_OpaqueBasePass_Shared_Forward_668;; Offset:  668
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_OpaqueBasePass_Shared_Forward_676;; Offset:  676
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_OpaqueBasePass_Shared_Forward_684;; Offset:  684
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_OpaqueBasePass_Shared_Forward_692;; Offset:  692
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_OpaqueBasePass_Shared_Forward_700;; Offset:  700
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid;; Offset:  704
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_708;; Offset:  708
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_712;; Offset:  712
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_716;; Offset:  716
;       uint OpaqueBasePass_Shared_ForwardISR_NumLocalLights;; Offset:  720
;       uint OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;; Offset:  724
;       uint OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;; Offset:  728
;       uint OpaqueBasePass_Shared_ForwardISR_NumGridCells;; Offset:  732
;       int3 OpaqueBasePass_Shared_ForwardISR_CulledGridSize;; Offset:  736
;       uint OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;; Offset:  748
;       uint OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;; Offset:  752
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_756;; Offset:  756
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_760;; Offset:  760
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_764;; Offset:  764
;       float3 OpaqueBasePass_Shared_ForwardISR_LightGridZParams;; Offset:  768
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_780;; Offset:  780
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;; Offset:  784
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;; Offset:  796
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;; Offset:  800
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;; Offset:  812
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;; Offset:  816
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_820;; Offset:  820
;       float2 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;; Offset:  824
;       uint OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;; Offset:  832
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;; Offset:  836
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_840;; Offset:  840
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_844;; Offset:  844
;       float4 OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;; Offset:  848
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  864
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];; Offset: 1120
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;; Offset: 1184
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;; Offset: 1200
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;; Offset: 1204
;       uint OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;; Offset: 1208
;       uint OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;; Offset: 1212
;       uint OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex;; Offset: 1216
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1220;; Offset: 1220
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1224;; Offset: 1224
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1228;; Offset: 1228
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;; Offset: 1232
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;; Offset: 1248
;       uint OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;; Offset: 1312
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;; Offset: 1316
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;; Offset: 1320
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;; Offset: 1324
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;; Offset: 1328
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;; Offset: 1332
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset: 1336
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset: 1340
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset: 1344
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset: 1348
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset: 1352
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset: 1356
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset: 1360
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1364;; Offset: 1364
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1368;; Offset: 1368
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1372;; Offset: 1372
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;; Offset: 1376
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1380;; Offset: 1380
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler;; Offset: 1384
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1388;; Offset: 1388
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;; Offset: 1392
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1396;; Offset: 1396
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler;; Offset: 1400
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1404;; Offset: 1404
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;; Offset: 1408
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1412;; Offset: 1412
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid;; Offset: 1416
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1420;; Offset: 1420
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid;; Offset: 1424
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1428;; Offset: 1428
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1432;; Offset: 1432
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1436;; Offset: 1436
;       float4 OpaqueBasePass_Shared_Reflection_SkyLightParameters;; Offset: 1440
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightCubemap;; Offset: 1456
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1460;; Offset: 1460
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler;; Offset: 1464
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1468;; Offset: 1468
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;; Offset: 1472
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1476;; Offset: 1476
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;; Offset: 1480
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1484;; Offset: 1484
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_ReflectionCubemap;; Offset: 1488
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1492;; Offset: 1492
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler;; Offset: 1496
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1500;; Offset: 1500
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_PreIntegratedGF;; Offset: 1504
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1508;; Offset: 1508
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler;; Offset: 1512
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1516;; Offset: 1516
;       float4 OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;; Offset: 1520
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;; Offset: 1536
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;; Offset: 1552
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;; Offset: 1568
;       row_major float3x4 OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;; Offset: 1584
;       float3 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;; Offset: 1632
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1644;; Offset: 1644
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;; Offset: 1648
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1656;; Offset: 1656
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1660;; Offset: 1660
;       row_major float4x4 OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];; Offset: 1664
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];; Offset: 1792
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;; Offset: 1824
;       uint OpaqueBasePass_Shared_PlanarReflection_bIsStereo;; Offset: 1832
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1836;; Offset: 1836
;       uint BindlessResource_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture;; Offset: 1840
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1844;; Offset: 1844
;       uint BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler;; Offset: 1848
;       float PrePadding_OpaqueBasePass_Shared_Fog_1852;; Offset: 1852
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters;; Offset: 1856
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;; Offset: 1872
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;; Offset: 1888
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;; Offset: 1904
;       float4 OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;; Offset: 1920
;       float4 OpaqueBasePass_Shared_Fog_InscatteringLightDirection;; Offset: 1936
;       float4 OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;; Offset: 1952
;       float2 OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;; Offset: 1968
;       float PrePadding_OpaqueBasePass_Shared_Fog_1976;; Offset: 1976
;       float PrePadding_OpaqueBasePass_Shared_Fog_1980;; Offset: 1980
;       float3 OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;; Offset: 1984
;       float OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;; Offset: 1996
;       float OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;; Offset: 2000
;       float OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;; Offset: 2004
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap;; Offset: 2008
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2012;; Offset: 2012
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler;; Offset: 2016
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2020;; Offset: 2020
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_IntegratedLightScattering;; Offset: 2024
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2028;; Offset: 2028
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler;; Offset: 2032
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2036;; Offset: 2036
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2040;; Offset: 2040
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2044;; Offset: 2044
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;; Offset: 2048
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;; Offset: 2064
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;; Offset: 2080
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;; Offset: 2096
;       float4 OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;; Offset: 2112
;       float4 OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;; Offset: 2128
;       float4 OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;; Offset: 2144
;       float2 OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;; Offset: 2160
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2168;; Offset: 2168
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2172;; Offset: 2172
;       float3 OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;; Offset: 2176
;       float OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;; Offset: 2188
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;; Offset: 2192
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;; Offset: 2196
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap;; Offset: 2200
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2204;; Offset: 2204
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler;; Offset: 2208
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2212;; Offset: 2212
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering;; Offset: 2216
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2220;; Offset: 2220
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler;; Offset: 2224
;       float PrePadding_OpaqueBasePass_Shared_2228;  ; Offset: 2228
;       float PrePadding_OpaqueBasePass_Shared_2232;  ; Offset: 2232
;       float PrePadding_OpaqueBasePass_Shared_2236;  ; Offset: 2236
;       uint OpaqueBasePass_Shared_UseBasePassSkylight;; Offset: 2240
;       float PrePadding_OpaqueBasePass_Strata_2244;  ; Offset: 2244
;       float PrePadding_OpaqueBasePass_Strata_2248;  ; Offset: 2248
;       float PrePadding_OpaqueBasePass_Strata_2252;  ; Offset: 2252
;       uint OpaqueBasePass_Strata_MaxBytesPerPixel;  ; Offset: 2256
;       uint OpaqueBasePass_Strata_bRoughDiffuse;     ; Offset: 2260
;       uint OpaqueBasePass_Strata_PeelLayersAboveDepth;; Offset: 2264
;       uint OpaqueBasePass_Strata_bRoughnessTracking;; Offset: 2268
;       int OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT;; Offset: 2272
;       int OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT;; Offset: 2276
;       uint BindlessResource_OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs;; Offset: 2280
;       uint PrePadding_OpaqueBasePass_Strata_2284;   ; Offset: 2284
;       uint BindlessResource_OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV;; Offset: 2288
;       float PrePadding_OpaqueBasePass_2292;         ; Offset: 2292
;       float PrePadding_OpaqueBasePass_2296;         ; Offset: 2296
;       float PrePadding_OpaqueBasePass_2300;         ; Offset: 2300
;       int OpaqueBasePass_UseForwardScreenSpaceShadowMask;; Offset: 2304
;       int PrePadding_OpaqueBasePass_2308;           ; Offset: 2308
;       uint BindlessResource_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;; Offset: 2312
;       uint PrePadding_OpaqueBasePass_2316;          ; Offset: 2316
;       uint BindlessResource_OpaqueBasePass_IndirectOcclusionTexture;; Offset: 2320
;       uint PrePadding_OpaqueBasePass_2324;          ; Offset: 2324
;       uint BindlessResource_OpaqueBasePass_ResolvedSceneDepthTexture;; Offset: 2328
;       float PrePadding_OpaqueBasePass_2332;         ; Offset: 2332
;       uint BindlessResource_OpaqueBasePass_DBufferATexture;; Offset: 2336
;       uint PrePadding_OpaqueBasePass_2340;          ; Offset: 2340
;       uint BindlessResource_OpaqueBasePass_DBufferBTexture;; Offset: 2344
;       uint PrePadding_OpaqueBasePass_2348;          ; Offset: 2348
;       uint BindlessResource_OpaqueBasePass_DBufferCTexture;; Offset: 2352
;       uint PrePadding_OpaqueBasePass_2356;          ; Offset: 2356
;       uint BindlessResource_OpaqueBasePass_DBufferRenderMask;; Offset: 2360
;       uint PrePadding_OpaqueBasePass_2364;          ; Offset: 2364
;       uint BindlessSampler_OpaqueBasePass_DBufferATextureSampler;; Offset: 2368
;       uint PrePadding_OpaqueBasePass_2372;          ; Offset: 2372
;       uint BindlessSampler_OpaqueBasePass_DBufferBTextureSampler;; Offset: 2376
;       uint PrePadding_OpaqueBasePass_2380;          ; Offset: 2380
;       uint BindlessSampler_OpaqueBasePass_DBufferCTextureSampler;; Offset: 2384
;       uint PrePadding_OpaqueBasePass_2388;          ; Offset: 2388
;       uint PrePadding_OpaqueBasePass_2392;          ; Offset: 2392
;       uint PrePadding_OpaqueBasePass_2396;          ; Offset: 2396
;       uint BindlessResource_OpaqueBasePass_PreIntegratedGFTexture;; Offset: 2400
;       uint PrePadding_OpaqueBasePass_2404;          ; Offset: 2404
;       uint BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler;; Offset: 2408
;       uint PrePadding_OpaqueBasePass_2412;          ; Offset: 2412
;       int OpaqueBasePass_Is24BitUnormDepthStencil;  ; Offset: 2416
;       int PrePadding_OpaqueBasePass_2420;           ; Offset: 2420
;       uint BindlessResource_OpaqueBasePass_EyeAdaptationBuffer;; Offset: 2424
;   
;   } UniformBufferConstants_OpaqueBasePass;          ; Offset:    0 Size:  2428
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_MaterialResolve; ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_ShadingRate;     ; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint Nanite_MultiViewEnabled;                 ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_InViews;         ; Offset:  176
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[9];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  144
;       uint PrePadding_Material_148;                 ; Offset:  148
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  152
;       uint PrePadding_Material_156;                 ; Offset:  156
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  160
;       uint PrePadding_Material_164;                 ; Offset:  164
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  168
;       uint PrePadding_Material_172;                 ; Offset:  172
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  176
;       uint PrePadding_Material_180;                 ; Offset:  180
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  184
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   188
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_OpaqueBasePass   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferBTextureSampler   sampler      NA          NA      S2             s2     1
; OpaqueBasePass_DBufferCTextureSampler   sampler      NA          NA      S3             s3     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients1   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T4             t4     1
; View_VolumetricLightmapBrickSHCoefficients3   texture     f32          3d      T5             t5     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T6             t6     1
; View_VolumetricLightmapBrickSHCoefficients5   texture     f32          3d      T7             t7     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T8             t8     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T9             t9     1
; View_PrimitiveSceneData           texture  struct         r/o     T10            t10     1
; View_InstanceSceneData            texture  struct         r/o     T11            t11     1
; View_InstancePayloadData          texture  struct         r/o     T12            t12     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o     T13            t13     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d     T14            t14     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d     T15            t15     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d     T16            t16     1
; Nanite_ClusterPageData            texture    byte         r/o     T17            t17     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o     T18            t18     1
; Nanite_VisBuffer64                texture     u32          2d     T19            t19     1
; Material_Texture2D_0              texture     f32          2d     T20            t20     1
; Material_Texture2D_1              texture     f32          2d     T21            t21     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 28
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;   output 4 depends on inputs: { 4, 5 }
;   output 5 depends on inputs: { 4, 5 }
;   output 6 depends on inputs: { 4, 5 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5 }
;   output 12 depends on inputs: { 4, 5 }
;   output 13 depends on inputs: { 4, 5 }
;   output 14 depends on inputs: { 4, 5 }
;   output 15 depends on inputs: { 4, 5 }
;   output 16 depends on inputs: { 4, 5 }
;   output 17 depends on inputs: { 4, 5 }
;   output 18 depends on inputs: { 4, 5 }
;   output 19 depends on inputs: { 4, 5 }
;   output 24 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_OpaqueBasePass = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [3 x <4 x float>], <3 x float>, float, <2 x float>, float, float, [2 x [4 x <4 x float>]], [2 x <4 x float>], <2 x float>, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [9 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 2428 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.i32 %38, 0
  %40 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.f32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %40, 2
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 3
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 139)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = extractvalue %dx.types.CBufRet.f32 %59, 3
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 3
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %86 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 87)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 88)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 108)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = fadd fast float %36, -5.000000e-01
  %112 = fadd fast float %37, -5.000000e-01
  %113 = fptoui float %111 to i32
  %114 = fptoui float %112 to i32
  %115 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %116 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %115, i32 0, i32 %113, i32 %114, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %117 = extractvalue %dx.types.ResRet.i32 %116, 0
  %118 = extractvalue %dx.types.ResRet.i32 %116, 1
  %119 = lshr i32 %117, 7
  %120 = and i32 %117, 127
  %121 = bitcast i32 %118 to float
  %122 = icmp eq i32 %119, 0
  br i1 %122, label %1653, label %123

; <label>:123                                     ; preds = %0
  %124 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %125 = shl nuw nsw i32 %119, 3
  %126 = add nsw i32 %125, -8
  %127 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %128 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %127, i32 %126, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %129 = extractvalue %dx.types.ResRet.i32 %128, 0
  %130 = extractvalue %dx.types.ResRet.i32 %128, 1
  %131 = lshr i32 %129, 16
  %132 = and i32 %130, 16777215
  %133 = lshr i32 %130, 24
  %134 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %124, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.i32 %134, 0
  %136 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %137 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %136, i32 %132, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %138 = extractvalue %dx.types.ResRet.f32 %137, 0
  %139 = bitcast float %138 to i32
  %140 = and i32 %139, 1048575
  %141 = lshr i32 %139, 20
  %142 = extractvalue %dx.types.ResRet.f32 %137, 1
  %143 = bitcast float %142 to i32
  %144 = and i32 %143, 16777215
  %145 = mul nuw nsw i32 %140, 41
  %146 = add nuw nsw i32 %145, 26
  %147 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %148 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %146, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %149 = extractvalue %dx.types.ResRet.f32 %148, 3
  %150 = bitcast float %149 to i32
  %151 = add nuw nsw i32 %145, 27
  %152 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %151, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %153 = extractvalue %dx.types.ResRet.f32 %152, 3
  %154 = bitcast float %153 to i32
  %155 = mul i32 %154, %144
  %156 = and i32 %141, 64
  %157 = icmp ne i32 %156, 0
  %158 = and i32 %141, 8
  %159 = and i32 %141, 160
  %160 = icmp ne i32 %159, 0
  %161 = zext i1 %160 to i32
  %162 = select i1 %157, i32 2, i32 %161
  %163 = add i32 %150, %162
  %164 = add i32 %163, %155
  %165 = add nuw nsw i32 %145, 1
  %166 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %165, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %167 = extractvalue %dx.types.ResRet.f32 %166, 0
  %168 = extractvalue %dx.types.ResRet.f32 %166, 1
  %169 = extractvalue %dx.types.ResRet.f32 %166, 2
  %170 = add nuw nsw i32 %145, 14
  %171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %170, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %172 = extractvalue %dx.types.ResRet.f32 %171, 0
  %173 = extractvalue %dx.types.ResRet.f32 %171, 1
  %174 = extractvalue %dx.types.ResRet.f32 %171, 2
  %175 = add nuw nsw i32 %145, 15
  %176 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %175, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %177 = extractvalue %dx.types.ResRet.f32 %176, 0
  %178 = extractvalue %dx.types.ResRet.f32 %176, 1
  %179 = extractvalue %dx.types.ResRet.f32 %176, 2
  %180 = add nuw nsw i32 %145, 16
  %181 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %180, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = add i32 %135, %132
  %186 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %136, i32 %185, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 0
  %188 = extractvalue %dx.types.ResRet.f32 %186, 1
  %189 = extractvalue %dx.types.ResRet.f32 %186, 2
  %190 = extractvalue %dx.types.ResRet.f32 %186, 3
  %191 = bitcast float %187 to i32
  %192 = bitcast float %188 to i32
  %193 = bitcast float %189 to i32
  %194 = bitcast float %190 to i32
  %195 = shl i32 %135, 1
  %196 = add i32 %195, %132
  %197 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %136, i32 %196, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %198 = extractvalue %dx.types.ResRet.f32 %197, 0
  %199 = extractvalue %dx.types.ResRet.f32 %197, 1
  %200 = extractvalue %dx.types.ResRet.f32 %197, 2
  %201 = and i32 %191, 65535
  %202 = uitofp i32 %201 to float
  %203 = lshr i32 %191, 16
  %204 = uitofp i32 %203 to float
  %205 = and i32 %192, 32767
  %206 = uitofp i32 %205 to float
  %207 = fadd fast float %202, -3.276800e+04
  %208 = fadd fast float %204, -3.276800e+04
  %209 = fadd fast float %206, -1.638400e+04
  %210 = fmul fast float %209, 0x3F06A0F8E0000000
  %211 = and i32 %192, 32768
  %212 = icmp ne i32 %211, 0
  %213 = fadd fast float %207, %208
  %214 = fmul fast float %213, 0x3F00002000000000
  %215 = fsub fast float %207, %208
  %216 = fmul fast float %215, 0x3F00002000000000
  %217 = call float @dx.op.unary.f32(i32 6, float %214)  ; FAbs(value)
  %218 = call float @dx.op.unary.f32(i32 6, float %216)  ; FAbs(value)
  %219 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %217, float %218)  ; Dot2(ax,ay,bx,by)
  %220 = fsub fast float 2.000000e+00, %219
  %221 = call float @dx.op.dot3.f32(i32 55, float %214, float %216, float %220, float %214, float %216, float %220)  ; Dot3(ax,ay,az,bx,by,bz)
  %222 = call float @dx.op.unary.f32(i32 25, float %221)  ; Rsqrt(value)
  %223 = fmul fast float %222, %214
  %224 = fmul fast float %222, %216
  %225 = fmul fast float %222, %220
  %226 = fadd fast float %225, 1.000000e+00
  %227 = fdiv fast float 1.000000e+00, %226
  %228 = fmul fast float %224, %223
  %229 = fmul fast float %228, %227
  %230 = fsub fast float -0.000000e+00, %229
  %231 = fmul fast float %223, %223
  %232 = fmul fast float %231, %227
  %233 = fsub fast float 1.000000e+00, %232
  %234 = fmul fast float %224, %224
  %235 = fmul fast float %234, %227
  %236 = fsub fast float 1.000000e+00, %235
  %237 = fmul fast float %210, %210
  %238 = fsub fast float 1.000000e+00, %237
  %239 = call float @dx.op.unary.f32(i32 24, float %238)  ; Sqrt(value)
  %240 = select i1 %212, float %210, float %239
  %241 = select i1 %212, float %239, float %210
  %242 = fmul fast float %233, %240
  %243 = fmul fast float %240, %230
  %244 = fmul fast float %240, %223
  %245 = fmul fast float %241, %230
  %246 = fmul fast float %236, %241
  %247 = fmul fast float %224, %241
  %248 = fsub fast float -0.000000e+00, %247
  %249 = fadd fast float %242, %245
  %250 = fadd fast float %243, %246
  %251 = fsub fast float %248, %244
  %252 = fmul fast float %251, %224
  %253 = fmul fast float %250, %225
  %254 = fsub fast float %252, %253
  %255 = fmul fast float %249, %225
  %256 = fmul fast float %251, %223
  %257 = fsub fast float %255, %256
  %258 = fmul fast float %250, %223
  %259 = fmul fast float %249, %224
  %260 = fsub fast float %258, %259
  %261 = lshr i32 %194, 16
  %262 = shl i32 %261, 23
  %263 = add i32 %262, -125829120
  %264 = bitcast i32 %263 to float
  %265 = lshr i32 %193, 16
  %266 = and i32 %193, 65535
  %267 = and i32 %194, 65535
  %268 = uitofp i32 %266 to float
  %269 = uitofp i32 %265 to float
  %270 = uitofp i32 %267 to float
  %271 = fadd fast float %268, -3.276800e+04
  %272 = fadd fast float %269, -3.276800e+04
  %273 = fadd fast float %270, -3.276800e+04
  %274 = fmul fast float %264, %271
  %275 = fmul fast float %264, %272
  %276 = fmul fast float %264, %273
  %277 = fmul fast float %249, %274
  %278 = fmul fast float %250, %274
  %279 = fmul fast float %251, %274
  %280 = fmul fast float %254, %275
  %281 = fmul fast float %257, %275
  %282 = fmul fast float %260, %275
  %283 = fmul fast float %223, %276
  %284 = fmul fast float %224, %276
  %285 = fmul fast float %225, %276
  %286 = call float @dx.op.unary.f32(i32 6, float %274)  ; FAbs(value)
  %287 = call float @dx.op.unary.f32(i32 6, float %275)  ; FAbs(value)
  %288 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %289 = fdiv fast float 1.000000e+00, %286
  %290 = fdiv fast float 1.000000e+00, %287
  %291 = fdiv fast float 1.000000e+00, %288
  %292 = fmul fast float %289, %289
  %293 = fmul fast float %277, %292
  %294 = fmul fast float %278, %292
  %295 = fmul fast float %292, %279
  %296 = fmul fast float %290, %290
  %297 = fmul fast float %280, %296
  %298 = fmul fast float %281, %296
  %299 = fmul fast float %282, %296
  %300 = fmul fast float %291, %291
  %301 = fmul fast float %300, %283
  %302 = fmul fast float %300, %284
  %303 = fmul fast float %300, %285
  %304 = icmp eq i32 %164, -1
  %305 = icmp eq i32 %158, 0
  %306 = or i1 %305, %304
  br i1 %306, label %408, label %307, !dx.controlflow.hints !67

; <label>:307                                     ; preds = %123
  %308 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %309 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %308, i32 %164, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %310 = extractvalue %dx.types.ResRet.f32 %309, 0
  %311 = extractvalue %dx.types.ResRet.f32 %309, 1
  %312 = extractvalue %dx.types.ResRet.f32 %309, 2
  %313 = extractvalue %dx.types.ResRet.f32 %309, 3
  %314 = bitcast float %310 to i32
  %315 = bitcast float %311 to i32
  %316 = bitcast float %312 to i32
  %317 = bitcast float %313 to i32
  %318 = add i32 %164, 1
  %319 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %308, i32 %318, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %320 = extractvalue %dx.types.ResRet.f32 %319, 0
  %321 = extractvalue %dx.types.ResRet.f32 %319, 1
  %322 = extractvalue %dx.types.ResRet.f32 %319, 2
  %323 = and i32 %314, 65535
  %324 = uitofp i32 %323 to float
  %325 = lshr i32 %314, 16
  %326 = uitofp i32 %325 to float
  %327 = and i32 %315, 32767
  %328 = uitofp i32 %327 to float
  %329 = fadd fast float %324, -3.276800e+04
  %330 = fadd fast float %326, -3.276800e+04
  %331 = fadd fast float %328, -1.638400e+04
  %332 = fmul fast float %331, 0x3F06A0F8E0000000
  %333 = and i32 %315, 32768
  %334 = icmp ne i32 %333, 0
  %335 = fadd fast float %329, %330
  %336 = fmul fast float %335, 0x3F00002000000000
  %337 = fsub fast float %329, %330
  %338 = fmul fast float %337, 0x3F00002000000000
  %339 = call float @dx.op.unary.f32(i32 6, float %336)  ; FAbs(value)
  %340 = call float @dx.op.unary.f32(i32 6, float %338)  ; FAbs(value)
  %341 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %339, float %340)  ; Dot2(ax,ay,bx,by)
  %342 = fsub fast float 2.000000e+00, %341
  %343 = call float @dx.op.dot3.f32(i32 55, float %336, float %338, float %342, float %336, float %338, float %342)  ; Dot3(ax,ay,az,bx,by,bz)
  %344 = call float @dx.op.unary.f32(i32 25, float %343)  ; Rsqrt(value)
  %345 = fmul fast float %344, %336
  %346 = fmul fast float %344, %338
  %347 = fmul fast float %344, %342
  %348 = fadd fast float %347, 1.000000e+00
  %349 = fdiv fast float 1.000000e+00, %348
  %350 = fmul fast float %346, %345
  %351 = fmul fast float %350, %349
  %352 = fsub fast float -0.000000e+00, %351
  %353 = fmul fast float %345, %345
  %354 = fmul fast float %353, %349
  %355 = fsub fast float 1.000000e+00, %354
  %356 = fmul fast float %346, %346
  %357 = fmul fast float %356, %349
  %358 = fsub fast float 1.000000e+00, %357
  %359 = fmul fast float %332, %332
  %360 = fsub fast float 1.000000e+00, %359
  %361 = call float @dx.op.unary.f32(i32 24, float %360)  ; Sqrt(value)
  %362 = select i1 %334, float %332, float %361
  %363 = select i1 %334, float %361, float %332
  %364 = fmul fast float %355, %362
  %365 = fmul fast float %362, %352
  %366 = fmul fast float %362, %345
  %367 = fmul fast float %363, %352
  %368 = fmul fast float %358, %363
  %369 = fmul fast float %346, %363
  %370 = fsub fast float -0.000000e+00, %369
  %371 = fadd fast float %364, %367
  %372 = fadd fast float %365, %368
  %373 = fsub fast float %370, %366
  %374 = fmul fast float %373, %346
  %375 = fmul fast float %372, %347
  %376 = fsub fast float %374, %375
  %377 = fmul fast float %371, %347
  %378 = fmul fast float %373, %345
  %379 = fsub fast float %377, %378
  %380 = fmul fast float %372, %345
  %381 = fmul fast float %371, %346
  %382 = fsub fast float %380, %381
  %383 = lshr i32 %317, 16
  %384 = shl i32 %383, 23
  %385 = add i32 %384, -125829120
  %386 = bitcast i32 %385 to float
  %387 = lshr i32 %316, 16
  %388 = and i32 %316, 65535
  %389 = and i32 %317, 65535
  %390 = uitofp i32 %388 to float
  %391 = uitofp i32 %387 to float
  %392 = uitofp i32 %389 to float
  %393 = fadd fast float %390, -3.276800e+04
  %394 = fadd fast float %391, -3.276800e+04
  %395 = fadd fast float %392, -3.276800e+04
  %396 = fmul fast float %386, %393
  %397 = fmul fast float %386, %394
  %398 = fmul fast float %386, %395
  %399 = fmul fast float %371, %396
  %400 = fmul fast float %372, %396
  %401 = fmul fast float %373, %396
  %402 = fmul fast float %376, %397
  %403 = fmul fast float %379, %397
  %404 = fmul fast float %382, %397
  %405 = fmul fast float %345, %398
  %406 = fmul fast float %346, %398
  %407 = fmul fast float %347, %398
  br label %451

; <label>:408                                     ; preds = %123
  %409 = extractvalue %dx.types.ResRet.f32 %181, 3
  %410 = extractvalue %dx.types.ResRet.f32 %176, 3
  %411 = extractvalue %dx.types.ResRet.f32 %171, 3
  %412 = fmul fast float %277, %172
  %413 = call float @dx.op.tertiary.f32(i32 46, float %278, float %173, float %412)  ; FMad(a,b,c)
  %414 = call float @dx.op.tertiary.f32(i32 46, float %279, float %174, float %413)  ; FMad(a,b,c)
  %415 = fmul fast float %277, %177
  %416 = call float @dx.op.tertiary.f32(i32 46, float %278, float %178, float %415)  ; FMad(a,b,c)
  %417 = call float @dx.op.tertiary.f32(i32 46, float %279, float %179, float %416)  ; FMad(a,b,c)
  %418 = fmul fast float %277, %182
  %419 = call float @dx.op.tertiary.f32(i32 46, float %278, float %183, float %418)  ; FMad(a,b,c)
  %420 = call float @dx.op.tertiary.f32(i32 46, float %279, float %184, float %419)  ; FMad(a,b,c)
  %421 = fmul fast float %280, %172
  %422 = call float @dx.op.tertiary.f32(i32 46, float %281, float %173, float %421)  ; FMad(a,b,c)
  %423 = call float @dx.op.tertiary.f32(i32 46, float %282, float %174, float %422)  ; FMad(a,b,c)
  %424 = fmul fast float %280, %177
  %425 = call float @dx.op.tertiary.f32(i32 46, float %281, float %178, float %424)  ; FMad(a,b,c)
  %426 = call float @dx.op.tertiary.f32(i32 46, float %282, float %179, float %425)  ; FMad(a,b,c)
  %427 = fmul fast float %280, %182
  %428 = call float @dx.op.tertiary.f32(i32 46, float %281, float %183, float %427)  ; FMad(a,b,c)
  %429 = call float @dx.op.tertiary.f32(i32 46, float %282, float %184, float %428)  ; FMad(a,b,c)
  %430 = fmul fast float %283, %172
  %431 = call float @dx.op.tertiary.f32(i32 46, float %284, float %173, float %430)  ; FMad(a,b,c)
  %432 = call float @dx.op.tertiary.f32(i32 46, float %285, float %174, float %431)  ; FMad(a,b,c)
  %433 = fmul fast float %283, %177
  %434 = call float @dx.op.tertiary.f32(i32 46, float %284, float %178, float %433)  ; FMad(a,b,c)
  %435 = call float @dx.op.tertiary.f32(i32 46, float %285, float %179, float %434)  ; FMad(a,b,c)
  %436 = fmul fast float %283, %182
  %437 = call float @dx.op.tertiary.f32(i32 46, float %284, float %183, float %436)  ; FMad(a,b,c)
  %438 = call float @dx.op.tertiary.f32(i32 46, float %285, float %184, float %437)  ; FMad(a,b,c)
  %439 = fmul fast float %198, %172
  %440 = call float @dx.op.tertiary.f32(i32 46, float %199, float %173, float %439)  ; FMad(a,b,c)
  %441 = call float @dx.op.tertiary.f32(i32 46, float %200, float %174, float %440)  ; FMad(a,b,c)
  %442 = fadd fast float %441, %411
  %443 = fmul fast float %198, %177
  %444 = call float @dx.op.tertiary.f32(i32 46, float %199, float %178, float %443)  ; FMad(a,b,c)
  %445 = call float @dx.op.tertiary.f32(i32 46, float %200, float %179, float %444)  ; FMad(a,b,c)
  %446 = fadd fast float %445, %410
  %447 = fmul fast float %198, %182
  %448 = call float @dx.op.tertiary.f32(i32 46, float %199, float %183, float %447)  ; FMad(a,b,c)
  %449 = call float @dx.op.tertiary.f32(i32 46, float %200, float %184, float %448)  ; FMad(a,b,c)
  %450 = fadd fast float %449, %409
  br label %451

; <label>:451                                     ; preds = %408, %307
  %452 = phi float [ %399, %307 ], [ %414, %408 ]
  %453 = phi float [ %400, %307 ], [ %417, %408 ]
  %454 = phi float [ %401, %307 ], [ %420, %408 ]
  %455 = phi float [ %402, %307 ], [ %423, %408 ]
  %456 = phi float [ %403, %307 ], [ %426, %408 ]
  %457 = phi float [ %404, %307 ], [ %429, %408 ]
  %458 = phi float [ %405, %307 ], [ %432, %408 ]
  %459 = phi float [ %406, %307 ], [ %435, %408 ]
  %460 = phi float [ %407, %307 ], [ %438, %408 ]
  %461 = phi float [ %320, %307 ], [ %442, %408 ]
  %462 = phi float [ %321, %307 ], [ %446, %408 ]
  %463 = phi float [ %322, %307 ], [ %450, %408 ]
  %464 = fsub fast float %167, %41
  %465 = fsub fast float %168, %42
  %466 = fsub fast float %169, %43
  %467 = fmul fast float %464, 2.097152e+06
  %468 = fmul fast float %465, 2.097152e+06
  %469 = fmul fast float %466, 2.097152e+06
  %470 = fadd fast float %467, %45
  %471 = fadd fast float %470, %198
  %472 = fadd fast float %468, %46
  %473 = fadd fast float %472, %199
  %474 = fadd fast float %469, %47
  %475 = fadd fast float %474, %200
  %476 = extractvalue %dx.types.CBufRet.i32 %134, 1
  %477 = call i32 @dx.op.binary.i32(i32 40, i32 %131, i32 %476)  ; UMin(a,b)
  %478 = shl i32 %477, 17
  %479 = sub nsw i32 %131, %476
  %480 = call i32 @dx.op.binary.i32(i32 37, i32 %479, i32 0)  ; IMax(a,b)
  %481 = shl i32 %480, 15
  %482 = add i32 %481, %478
  %483 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %484 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %482, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %485 = extractvalue %dx.types.ResRet.i32 %484, 0
  %486 = shl i32 %485, 4
  %487 = shl nuw nsw i32 %133, 4
  %488 = or i32 %482, %487
  %489 = add nsw i32 %488, 16
  %490 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %489, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %491 = extractvalue %dx.types.ResRet.i32 %490, 0
  %492 = extractvalue %dx.types.ResRet.i32 %490, 1
  %493 = extractvalue %dx.types.ResRet.i32 %490, 3
  %494 = add i32 %489, %486
  %495 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %494, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %496 = extractvalue %dx.types.ResRet.i32 %495, 0
  %497 = extractvalue %dx.types.ResRet.i32 %495, 1
  %498 = extractvalue %dx.types.ResRet.i32 %495, 2
  %499 = extractvalue %dx.types.ResRet.i32 %495, 3
  %500 = mul i32 %485, 80
  %501 = add i32 %489, %500
  %502 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %501, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %503 = extractvalue %dx.types.ResRet.i32 %502, 0
  %504 = extractvalue %dx.types.ResRet.i32 %502, 1
  %505 = extractvalue %dx.types.ResRet.i32 %502, 2
  %506 = lshr i32 %491, 9
  %507 = lshr i32 %492, 8
  %508 = and i32 %499, 15
  %509 = lshr i32 %499, 9
  %510 = and i32 %509, 31
  %511 = lshr i32 %499, 14
  %512 = and i32 %511, 31
  %513 = lshr i32 %499, 19
  %514 = and i32 %513, 31
  %515 = lshr i32 %499, 24
  %516 = and i32 %515, 15
  %517 = and i32 %503, 4194303
  %518 = lshr i32 %503, 22
  %519 = and i32 %504, 4194303
  %520 = and i32 %504, 29360128
  %521 = add nuw nsw i32 %508, 10
  %522 = mul nuw nsw i32 %521, %120
  %523 = add i32 %507, %482
  %524 = lshr i32 %522, 5
  %525 = shl nuw nsw i32 %524, 2
  %526 = add i32 %523, %525
  %527 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %526, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %528 = extractvalue %dx.types.ResRet.i32 %527, 0
  %529 = extractvalue %dx.types.ResRet.i32 %527, 1
  %530 = and i32 %522, 31
  %531 = lshr i32 %528, %530
  %532 = icmp ne i32 %530, 0
  %533 = sub nsw i32 0, %522
  %534 = and i32 %533, 31
  %535 = shl i32 %529, %534
  %536 = select i1 %532, i32 %535, i32 0
  %537 = or i32 %536, %531
  %538 = shl i32 1, %508
  %539 = add i32 %538, -1
  %540 = and i32 %537, %539
  %541 = lshr i32 %537, %508
  %542 = and i32 %541, 31
  %543 = add nuw nsw i32 %508, 5
  %544 = lshr i32 %537, %543
  %545 = and i32 %544, 31
  %546 = add i32 %542, %540
  %547 = add i32 %545, %540
  %548 = add nuw nsw i32 %510, %512
  %549 = add nuw nsw i32 %548, %514
  %550 = mul i32 %540, %549
  %551 = add i32 %506, %482
  %552 = lshr i32 %550, 5
  %553 = shl nuw nsw i32 %552, 2
  %554 = add i32 %551, %553
  %555 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %554, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %556 = extractvalue %dx.types.ResRet.i32 %555, 0
  %557 = extractvalue %dx.types.ResRet.i32 %555, 1
  %558 = extractvalue %dx.types.ResRet.i32 %555, 2
  %559 = and i32 %550, 31
  %560 = lshr i32 %556, %559
  %561 = icmp ne i32 %559, 0
  %562 = sub i32 0, %550
  %563 = and i32 %562, 31
  %564 = shl i32 %557, %563
  %565 = select i1 %561, i32 %564, i32 0
  %566 = or i32 %565, %560
  %567 = lshr i32 %557, %559
  %568 = shl i32 %558, %563
  %569 = select i1 %561, i32 %568, i32 0
  %570 = or i32 %569, %567
  %571 = shl i32 1, %510
  %572 = add i32 %571, -1
  %573 = and i32 %566, %572
  %574 = lshr i32 %566, %510
  %575 = icmp ne i32 %510, 0
  %576 = sub nsw i32 0, %509
  %577 = and i32 %576, 31
  %578 = shl i32 %570, %577
  %579 = select i1 %575, i32 %578, i32 0
  %580 = or i32 %579, %574
  %581 = lshr i32 %570, %510
  %582 = shl i32 1, %512
  %583 = add i32 %582, -1
  %584 = and i32 %580, %583
  %585 = lshr i32 %580, %512
  %586 = icmp ne i32 %512, 0
  %587 = sub nsw i32 0, %511
  %588 = and i32 %587, 31
  %589 = shl i32 %581, %588
  %590 = select i1 %586, i32 %589, i32 0
  %591 = or i32 %585, %590
  %592 = shl i32 1, %514
  %593 = add i32 %592, -1
  %594 = and i32 %591, %593
  %595 = shl i32 %499, 19
  %596 = and i32 %595, 260046848
  %597 = sub nsw i32 1132462080, %596
  %598 = bitcast i32 %597 to float
  %599 = add i32 %573, %496
  %600 = add i32 %584, %497
  %601 = add i32 %594, %498
  %602 = sitofp i32 %599 to float
  %603 = sitofp i32 %600 to float
  %604 = sitofp i32 %601 to float
  %605 = fmul fast float %602, %598
  %606 = fmul fast float %603, %598
  %607 = fmul fast float %604, %598
  %608 = mul i32 %546, %549
  %609 = lshr i32 %608, 5
  %610 = shl nuw nsw i32 %609, 2
  %611 = add i32 %551, %610
  %612 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %611, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %613 = extractvalue %dx.types.ResRet.i32 %612, 0
  %614 = extractvalue %dx.types.ResRet.i32 %612, 1
  %615 = extractvalue %dx.types.ResRet.i32 %612, 2
  %616 = and i32 %608, 31
  %617 = lshr i32 %613, %616
  %618 = icmp ne i32 %616, 0
  %619 = sub i32 0, %608
  %620 = and i32 %619, 31
  %621 = shl i32 %614, %620
  %622 = select i1 %618, i32 %621, i32 0
  %623 = or i32 %622, %617
  %624 = lshr i32 %614, %616
  %625 = shl i32 %615, %620
  %626 = select i1 %618, i32 %625, i32 0
  %627 = or i32 %626, %624
  %628 = and i32 %623, %572
  %629 = lshr i32 %623, %510
  %630 = shl i32 %627, %577
  %631 = select i1 %575, i32 %630, i32 0
  %632 = or i32 %631, %629
  %633 = lshr i32 %627, %510
  %634 = and i32 %632, %583
  %635 = lshr i32 %632, %512
  %636 = shl i32 %633, %588
  %637 = select i1 %586, i32 %636, i32 0
  %638 = or i32 %635, %637
  %639 = and i32 %638, %593
  %640 = add i32 %628, %496
  %641 = add i32 %634, %497
  %642 = add i32 %639, %498
  %643 = sitofp i32 %640 to float
  %644 = sitofp i32 %641 to float
  %645 = sitofp i32 %642 to float
  %646 = fmul fast float %643, %598
  %647 = fmul fast float %644, %598
  %648 = fmul fast float %645, %598
  %649 = mul i32 %547, %549
  %650 = lshr i32 %649, 5
  %651 = shl nuw nsw i32 %650, 2
  %652 = add i32 %551, %651
  %653 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %652, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %654 = extractvalue %dx.types.ResRet.i32 %653, 0
  %655 = extractvalue %dx.types.ResRet.i32 %653, 1
  %656 = extractvalue %dx.types.ResRet.i32 %653, 2
  %657 = and i32 %649, 31
  %658 = lshr i32 %654, %657
  %659 = icmp ne i32 %657, 0
  %660 = sub i32 0, %649
  %661 = and i32 %660, 31
  %662 = shl i32 %655, %661
  %663 = select i1 %659, i32 %662, i32 0
  %664 = or i32 %663, %658
  %665 = lshr i32 %655, %657
  %666 = shl i32 %656, %661
  %667 = select i1 %659, i32 %666, i32 0
  %668 = or i32 %667, %665
  %669 = and i32 %664, %572
  %670 = lshr i32 %664, %510
  %671 = shl i32 %668, %577
  %672 = select i1 %575, i32 %671, i32 0
  %673 = or i32 %672, %670
  %674 = lshr i32 %668, %510
  %675 = and i32 %673, %583
  %676 = lshr i32 %673, %512
  %677 = shl i32 %674, %588
  %678 = select i1 %586, i32 %677, i32 0
  %679 = or i32 %676, %678
  %680 = and i32 %679, %593
  %681 = add i32 %669, %496
  %682 = add i32 %675, %497
  %683 = add i32 %680, %498
  %684 = sitofp i32 %681 to float
  %685 = sitofp i32 %682 to float
  %686 = sitofp i32 %683 to float
  %687 = fmul fast float %684, %598
  %688 = fmul fast float %685, %598
  %689 = fmul fast float %686, %598
  %690 = add i32 %519, %482
  %691 = add i32 %517, %482
  %692 = and i32 %493, 15
  %693 = lshr i32 %493, 4
  %694 = and i32 %693, 15
  %695 = lshr i32 %493, 8
  %696 = and i32 %695, 15
  %697 = lshr i32 %493, 12
  %698 = and i32 %697, 15
  %699 = mul i32 %540, %518
  %700 = shl nuw nsw i32 %516, 1
  %701 = ashr i32 %699, 5
  %702 = shl nsw i32 %701, 2
  %703 = add i32 %702, %691
  %704 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %703, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %705 = extractvalue %dx.types.ResRet.i32 %704, 0
  %706 = extractvalue %dx.types.ResRet.i32 %704, 1
  %707 = extractvalue %dx.types.ResRet.i32 %704, 2
  %708 = extractvalue %dx.types.ResRet.i32 %704, 3
  %709 = and i32 %699, 31
  %710 = lshr i32 %705, %709
  %711 = icmp ne i32 %709, 0
  %712 = sub i32 0, %699
  %713 = and i32 %712, 31
  %714 = shl i32 %706, %713
  %715 = select i1 %711, i32 %714, i32 0
  %716 = or i32 %715, %710
  %717 = lshr i32 %706, %709
  %718 = shl i32 %707, %713
  %719 = select i1 %711, i32 %718, i32 0
  %720 = or i32 %719, %717
  %721 = lshr i32 %707, %709
  %722 = shl i32 %708, %713
  %723 = select i1 %711, i32 %722, i32 0
  %724 = or i32 %723, %721
  %725 = shl i32 1, %700
  %726 = add i32 %725, -1
  %727 = and i32 %716, %726
  %728 = shl i32 1, %516
  %729 = add i32 %728, -1
  %730 = and i32 %727, %729
  %731 = lshr i32 %727, %516
  %732 = and i32 %731, %729
  %733 = uitofp i32 %730 to float
  %734 = uitofp i32 %732 to float
  %735 = uitofp i32 %729 to float
  %736 = fdiv fast float 2.000000e+00, %735
  %737 = fmul fast float %733, %736
  %738 = fmul fast float %734, %736
  %739 = fadd fast float %737, -1.000000e+00
  %740 = fadd fast float %738, -1.000000e+00
  %741 = call float @dx.op.unary.f32(i32 6, float %739)  ; FAbs(value)
  %742 = fsub fast float 1.000000e+00, %741
  %743 = call float @dx.op.unary.f32(i32 6, float %740)  ; FAbs(value)
  %744 = fsub fast float %742, %743
  %745 = fsub fast float -0.000000e+00, %744
  %746 = call float @dx.op.unary.f32(i32 7, float %745)  ; Saturate(value)
  %747 = fsub fast float -0.000000e+00, %746
  %748 = fcmp fast oge float %739, 0.000000e+00
  %749 = fcmp fast oge float %740, 0.000000e+00
  %750 = select i1 %748, float %747, float %746
  %751 = select i1 %749, float %747, float %746
  %752 = fadd fast float %750, %739
  %753 = fadd fast float %751, %740
  %754 = call float @dx.op.dot3.f32(i32 55, float %752, float %753, float %744, float %752, float %753, float %744)  ; Dot3(ax,ay,az,bx,by,bz)
  %755 = call float @dx.op.unary.f32(i32 25, float %754)  ; Rsqrt(value)
  %756 = fmul fast float %752, %755
  %757 = fmul fast float %753, %755
  %758 = fmul fast float %755, %744
  %759 = lshr i32 %716, %700
  %760 = icmp ne i32 %516, 0
  %761 = sub nsw i32 0, %700
  %762 = and i32 %761, 30
  %763 = shl i32 %720, %762
  %764 = select i1 %760, i32 %763, i32 0
  %765 = or i32 %764, %759
  %766 = lshr i32 %720, %700
  %767 = shl i32 %724, %762
  %768 = select i1 %760, i32 %767, i32 0
  %769 = or i32 %768, %766
  %770 = add nuw nsw i32 %692, %694
  %771 = add nuw nsw i32 %770, %696
  %772 = add nuw nsw i32 %771, %698
  %773 = mul i32 %546, %518
  %774 = ashr i32 %773, 5
  %775 = shl nsw i32 %774, 2
  %776 = add i32 %775, %691
  %777 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %776, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %778 = extractvalue %dx.types.ResRet.i32 %777, 0
  %779 = extractvalue %dx.types.ResRet.i32 %777, 1
  %780 = extractvalue %dx.types.ResRet.i32 %777, 2
  %781 = extractvalue %dx.types.ResRet.i32 %777, 3
  %782 = and i32 %773, 31
  %783 = lshr i32 %778, %782
  %784 = icmp ne i32 %782, 0
  %785 = sub i32 0, %773
  %786 = and i32 %785, 31
  %787 = shl i32 %779, %786
  %788 = select i1 %784, i32 %787, i32 0
  %789 = or i32 %788, %783
  %790 = lshr i32 %779, %782
  %791 = shl i32 %780, %786
  %792 = select i1 %784, i32 %791, i32 0
  %793 = or i32 %792, %790
  %794 = lshr i32 %780, %782
  %795 = shl i32 %781, %786
  %796 = select i1 %784, i32 %795, i32 0
  %797 = or i32 %796, %794
  %798 = and i32 %789, %726
  %799 = and i32 %798, %729
  %800 = lshr i32 %798, %516
  %801 = and i32 %800, %729
  %802 = uitofp i32 %799 to float
  %803 = uitofp i32 %801 to float
  %804 = fmul fast float %802, %736
  %805 = fmul fast float %803, %736
  %806 = fadd fast float %804, -1.000000e+00
  %807 = fadd fast float %805, -1.000000e+00
  %808 = call float @dx.op.unary.f32(i32 6, float %806)  ; FAbs(value)
  %809 = fsub fast float 1.000000e+00, %808
  %810 = call float @dx.op.unary.f32(i32 6, float %807)  ; FAbs(value)
  %811 = fsub fast float %809, %810
  %812 = fsub fast float -0.000000e+00, %811
  %813 = call float @dx.op.unary.f32(i32 7, float %812)  ; Saturate(value)
  %814 = fsub fast float -0.000000e+00, %813
  %815 = fcmp fast oge float %806, 0.000000e+00
  %816 = fcmp fast oge float %807, 0.000000e+00
  %817 = select i1 %815, float %814, float %813
  %818 = select i1 %816, float %814, float %813
  %819 = fadd fast float %817, %806
  %820 = fadd fast float %818, %807
  %821 = call float @dx.op.dot3.f32(i32 55, float %819, float %820, float %811, float %819, float %820, float %811)  ; Dot3(ax,ay,az,bx,by,bz)
  %822 = call float @dx.op.unary.f32(i32 25, float %821)  ; Rsqrt(value)
  %823 = fmul fast float %819, %822
  %824 = fmul fast float %820, %822
  %825 = fmul fast float %822, %811
  %826 = lshr i32 %789, %700
  %827 = shl i32 %793, %762
  %828 = select i1 %760, i32 %827, i32 0
  %829 = or i32 %828, %826
  %830 = lshr i32 %793, %700
  %831 = shl i32 %797, %762
  %832 = select i1 %760, i32 %831, i32 0
  %833 = or i32 %832, %830
  %834 = mul i32 %547, %518
  %835 = ashr i32 %834, 5
  %836 = shl nsw i32 %835, 2
  %837 = add i32 %836, %691
  %838 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %837, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %839 = extractvalue %dx.types.ResRet.i32 %838, 0
  %840 = extractvalue %dx.types.ResRet.i32 %838, 1
  %841 = extractvalue %dx.types.ResRet.i32 %838, 2
  %842 = extractvalue %dx.types.ResRet.i32 %838, 3
  %843 = and i32 %834, 31
  %844 = lshr i32 %839, %843
  %845 = icmp ne i32 %843, 0
  %846 = sub i32 0, %834
  %847 = and i32 %846, 31
  %848 = shl i32 %840, %847
  %849 = select i1 %845, i32 %848, i32 0
  %850 = or i32 %849, %844
  %851 = lshr i32 %840, %843
  %852 = shl i32 %841, %847
  %853 = select i1 %845, i32 %852, i32 0
  %854 = or i32 %853, %851
  %855 = lshr i32 %841, %843
  %856 = shl i32 %842, %847
  %857 = select i1 %845, i32 %856, i32 0
  %858 = or i32 %857, %855
  %859 = and i32 %850, %726
  %860 = and i32 %859, %729
  %861 = lshr i32 %859, %516
  %862 = and i32 %861, %729
  %863 = uitofp i32 %860 to float
  %864 = uitofp i32 %862 to float
  %865 = fmul fast float %863, %736
  %866 = fmul fast float %864, %736
  %867 = fadd fast float %865, -1.000000e+00
  %868 = fadd fast float %866, -1.000000e+00
  %869 = call float @dx.op.unary.f32(i32 6, float %867)  ; FAbs(value)
  %870 = fsub fast float 1.000000e+00, %869
  %871 = call float @dx.op.unary.f32(i32 6, float %868)  ; FAbs(value)
  %872 = fsub fast float %870, %871
  %873 = fsub fast float -0.000000e+00, %872
  %874 = call float @dx.op.unary.f32(i32 7, float %873)  ; Saturate(value)
  %875 = fsub fast float -0.000000e+00, %874
  %876 = fcmp fast oge float %867, 0.000000e+00
  %877 = fcmp fast oge float %868, 0.000000e+00
  %878 = select i1 %876, float %875, float %874
  %879 = select i1 %877, float %875, float %874
  %880 = fadd fast float %878, %867
  %881 = fadd fast float %879, %868
  %882 = call float @dx.op.dot3.f32(i32 55, float %880, float %881, float %872, float %880, float %881, float %872)  ; Dot3(ax,ay,az,bx,by,bz)
  %883 = call float @dx.op.unary.f32(i32 25, float %882)  ; Rsqrt(value)
  %884 = fmul fast float %880, %883
  %885 = fmul fast float %881, %883
  %886 = fmul fast float %883, %872
  %887 = lshr i32 %850, %700
  %888 = shl i32 %854, %762
  %889 = select i1 %760, i32 %888, i32 0
  %890 = or i32 %889, %887
  %891 = lshr i32 %854, %700
  %892 = shl i32 %858, %762
  %893 = select i1 %760, i32 %892, i32 0
  %894 = or i32 %893, %891
  %895 = and i32 %505, 15
  %896 = lshr i32 %505, 4
  %897 = and i32 %896, 15
  %898 = icmp eq i32 %772, 32
  %899 = and i32 %772, 31
  %900 = lshr i32 %765, %899
  %901 = icmp ne i32 %899, 0
  %902 = sub nsw i32 0, %772
  %903 = and i32 %902, 31
  %904 = shl i32 %769, %903
  %905 = select i1 %901, i32 %904, i32 0
  %906 = or i32 %905, %900
  %907 = select i1 %898, i32 %769, i32 %906
  %908 = shl i32 1, %895
  %909 = add i32 %908, -1
  %910 = and i32 %907, %909
  %911 = lshr i32 %907, %895
  %912 = shl i32 1, %897
  %913 = add i32 %912, -1
  %914 = and i32 %911, %913
  %915 = icmp eq i32 %772, 32
  %916 = and i32 %772, 31
  %917 = lshr i32 %829, %916
  %918 = icmp ne i32 %916, 0
  %919 = sub nsw i32 0, %772
  %920 = and i32 %919, 31
  %921 = shl i32 %833, %920
  %922 = select i1 %918, i32 %921, i32 0
  %923 = or i32 %922, %917
  %924 = select i1 %915, i32 %833, i32 %923
  %925 = and i32 %924, %909
  %926 = lshr i32 %924, %895
  %927 = and i32 %926, %913
  %928 = icmp eq i32 %772, 32
  %929 = and i32 %772, 31
  %930 = lshr i32 %890, %929
  %931 = icmp ne i32 %929, 0
  %932 = sub nsw i32 0, %772
  %933 = and i32 %932, 31
  %934 = shl i32 %894, %933
  %935 = select i1 %931, i32 %934, i32 0
  %936 = or i32 %935, %930
  %937 = select i1 %928, i32 %894, i32 %936
  %938 = and i32 %937, %909
  %939 = lshr i32 %937, %895
  %940 = and i32 %939, %913
  %941 = icmp eq i32 %520, 0
  br i1 %941, label %992, label %942, !dx.controlflow.hints !68

; <label>:942                                     ; preds = %451
  %943 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %690, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %944 = extractvalue %dx.types.ResRet.i32 %943, 0
  %945 = extractvalue %dx.types.ResRet.i32 %943, 1
  %946 = extractvalue %dx.types.ResRet.i32 %943, 2
  %947 = extractvalue %dx.types.ResRet.i32 %943, 3
  %948 = add i32 %690, 16
  %949 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %483, i32 %948, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %950 = extractvalue %dx.types.ResRet.i32 %949, 0
  %951 = extractvalue %dx.types.ResRet.i32 %949, 1
  %952 = extractvalue %dx.types.ResRet.i32 %949, 2
  %953 = icmp ugt i32 %910, %946
  %954 = icmp ugt i32 %914, %947
  %955 = select i1 %953, i32 %950, i32 0
  %956 = select i1 %954, i32 %951, i32 0
  %957 = shl i32 %952, 23
  %958 = sub nsw i32 1065353216, %957
  %959 = bitcast i32 %958 to float
  %960 = add i32 %944, %910
  %961 = add i32 %960, %955
  %962 = add i32 %945, %914
  %963 = add i32 %962, %956
  %964 = sitofp i32 %961 to float
  %965 = sitofp i32 %963 to float
  %966 = fmul fast float %964, %959
  %967 = fmul fast float %965, %959
  %968 = icmp ugt i32 %925, %946
  %969 = icmp ugt i32 %927, %947
  %970 = select i1 %968, i32 %950, i32 0
  %971 = select i1 %969, i32 %951, i32 0
  %972 = add i32 %944, %925
  %973 = add i32 %972, %970
  %974 = add i32 %945, %927
  %975 = add i32 %974, %971
  %976 = sitofp i32 %973 to float
  %977 = sitofp i32 %975 to float
  %978 = fmul fast float %976, %959
  %979 = fmul fast float %977, %959
  %980 = icmp ugt i32 %938, %946
  %981 = icmp ugt i32 %940, %947
  %982 = select i1 %980, i32 %950, i32 0
  %983 = select i1 %981, i32 %951, i32 0
  %984 = add i32 %944, %938
  %985 = add i32 %984, %982
  %986 = add i32 %945, %940
  %987 = add i32 %986, %983
  %988 = sitofp i32 %985 to float
  %989 = sitofp i32 %987 to float
  %990 = fmul fast float %988, %959
  %991 = fmul fast float %989, %959
  br label %992

; <label>:992                                     ; preds = %942, %451
  %993 = phi float [ 0.000000e+00, %451 ], [ %990, %942 ]
  %994 = phi float [ 0.000000e+00, %451 ], [ %978, %942 ]
  %995 = phi float [ 0.000000e+00, %451 ], [ %966, %942 ]
  %996 = phi float [ 0.000000e+00, %451 ], [ %991, %942 ]
  %997 = phi float [ 0.000000e+00, %451 ], [ %979, %942 ]
  %998 = phi float [ 0.000000e+00, %451 ], [ %967, %942 ]
  %999 = and i32 %129, 8
  %1000 = icmp ne i32 %999, 0
  %1001 = fmul fast float %452, %292
  %1002 = fmul fast float %453, %292
  %1003 = fmul fast float %454, %292
  %1004 = fmul fast float %455, %296
  %1005 = fmul fast float %456, %296
  %1006 = fmul fast float %457, %296
  %1007 = fmul fast float %458, %300
  %1008 = fmul fast float %459, %300
  %1009 = fmul fast float %460, %300
  %1010 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %145, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1011 = extractvalue %dx.types.ResRet.f32 %1010, 0
  %1012 = bitcast float %1011 to i32
  %1013 = add nuw nsw i32 %145, 31
  %1014 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %147, i32 %1013, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1015 = extractvalue %dx.types.ResRet.f32 %1014, 0
  %1016 = and i32 %1012, 32768
  %1017 = icmp ne i32 %1016, 0
  %1018 = and i1 %1000, %1017
  %1019 = fmul fast float %605, %277
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %606, float %280, float %1019)  ; FMad(a,b,c)
  %1021 = call float @dx.op.tertiary.f32(i32 46, float %607, float %283, float %1020)  ; FMad(a,b,c)
  %1022 = fadd fast float %1021, %471
  %1023 = fmul fast float %605, %278
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %606, float %281, float %1023)  ; FMad(a,b,c)
  %1025 = call float @dx.op.tertiary.f32(i32 46, float %607, float %284, float %1024)  ; FMad(a,b,c)
  %1026 = fadd fast float %1025, %473
  %1027 = fmul fast float %605, %279
  %1028 = call float @dx.op.tertiary.f32(i32 46, float %606, float %282, float %1027)  ; FMad(a,b,c)
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %607, float %285, float %1028)  ; FMad(a,b,c)
  %1030 = fadd fast float %1029, %475
  br i1 %1018, label %1083, label %1031, !dx.controlflow.hints !69

; <label>:1031                                    ; preds = %992
  %1032 = fmul fast float %1022, %72
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %76, float %1032)  ; FMad(a,b,c)
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %80, float %1033)  ; FMad(a,b,c)
  %1035 = fmul fast float %1022, %73
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %77, float %1035)  ; FMad(a,b,c)
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %81, float %1036)  ; FMad(a,b,c)
  %1038 = fmul fast float %1022, %74
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %78, float %1038)  ; FMad(a,b,c)
  %1040 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %82, float %1039)  ; FMad(a,b,c)
  %1041 = fmul fast float %646, %277
  %1042 = call float @dx.op.tertiary.f32(i32 46, float %647, float %280, float %1041)  ; FMad(a,b,c)
  %1043 = call float @dx.op.tertiary.f32(i32 46, float %648, float %283, float %1042)  ; FMad(a,b,c)
  %1044 = fadd fast float %1043, %471
  %1045 = fmul fast float %646, %278
  %1046 = call float @dx.op.tertiary.f32(i32 46, float %647, float %281, float %1045)  ; FMad(a,b,c)
  %1047 = call float @dx.op.tertiary.f32(i32 46, float %648, float %284, float %1046)  ; FMad(a,b,c)
  %1048 = fadd fast float %1047, %473
  %1049 = fmul fast float %646, %279
  %1050 = call float @dx.op.tertiary.f32(i32 46, float %647, float %282, float %1049)  ; FMad(a,b,c)
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %648, float %285, float %1050)  ; FMad(a,b,c)
  %1052 = fadd fast float %1051, %475
  %1053 = fmul fast float %1044, %72
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %1048, float %76, float %1053)  ; FMad(a,b,c)
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %1052, float %80, float %1054)  ; FMad(a,b,c)
  %1056 = fmul fast float %1044, %73
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %1048, float %77, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %1052, float %81, float %1057)  ; FMad(a,b,c)
  %1059 = fmul fast float %1044, %74
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1048, float %78, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1052, float %82, float %1060)  ; FMad(a,b,c)
  %1062 = fmul fast float %687, %277
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %688, float %280, float %1062)  ; FMad(a,b,c)
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %689, float %283, float %1063)  ; FMad(a,b,c)
  %1065 = fadd fast float %1064, %471
  %1066 = fmul fast float %687, %278
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %688, float %281, float %1066)  ; FMad(a,b,c)
  %1068 = call float @dx.op.tertiary.f32(i32 46, float %689, float %284, float %1067)  ; FMad(a,b,c)
  %1069 = fadd fast float %1068, %473
  %1070 = fmul fast float %687, %279
  %1071 = call float @dx.op.tertiary.f32(i32 46, float %688, float %282, float %1070)  ; FMad(a,b,c)
  %1072 = call float @dx.op.tertiary.f32(i32 46, float %689, float %285, float %1071)  ; FMad(a,b,c)
  %1073 = fadd fast float %1072, %475
  %1074 = fmul fast float %1065, %72
  %1075 = call float @dx.op.tertiary.f32(i32 46, float %1069, float %76, float %1074)  ; FMad(a,b,c)
  %1076 = call float @dx.op.tertiary.f32(i32 46, float %1073, float %80, float %1075)  ; FMad(a,b,c)
  %1077 = fmul fast float %1065, %73
  %1078 = call float @dx.op.tertiary.f32(i32 46, float %1069, float %77, float %1077)  ; FMad(a,b,c)
  %1079 = call float @dx.op.tertiary.f32(i32 46, float %1073, float %81, float %1078)  ; FMad(a,b,c)
  %1080 = fmul fast float %1065, %74
  %1081 = call float @dx.op.tertiary.f32(i32 46, float %1069, float %78, float %1080)  ; FMad(a,b,c)
  %1082 = call float @dx.op.tertiary.f32(i32 46, float %1073, float %82, float %1081)  ; FMad(a,b,c)
  br label %1246

; <label>:1083                                    ; preds = %992
  %1084 = fcmp fast ole float %1015, 0.000000e+00
  %1085 = fsub fast float -0.000000e+00, %1015
  %1086 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1085)  ; FMax(a,b)
  %1087 = call float @dx.op.binary.f32(i32 36, float %1086, float %1015)  ; FMin(a,b)
  %1088 = select i1 %1084, float 0.000000e+00, float %1087
  %1089 = fcmp fast ole float %1015, 0.000000e+00
  %1090 = fsub fast float -0.000000e+00, %1015
  %1091 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1090)  ; FMax(a,b)
  %1092 = call float @dx.op.binary.f32(i32 36, float %1091, float %1015)  ; FMin(a,b)
  %1093 = select i1 %1089, float 0.000000e+00, float %1092
  %1094 = fmul fast float %1088, %293
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %294, float %1094)  ; FMad(a,b,c)
  %1096 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %295, float %1095)  ; FMad(a,b,c)
  %1097 = fmul fast float %1088, %297
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %298, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %299, float %1098)  ; FMad(a,b,c)
  %1100 = fmul fast float %1088, %301
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %302, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %303, float %1101)  ; FMad(a,b,c)
  %1103 = fmul fast float %1093, %1001
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1002, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1003, float %1104)  ; FMad(a,b,c)
  %1106 = fmul fast float %1093, %1004
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1005, float %1106)  ; FMad(a,b,c)
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1006, float %1107)  ; FMad(a,b,c)
  %1109 = fmul fast float %1093, %1007
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1008, float %1109)  ; FMad(a,b,c)
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1009, float %1110)  ; FMad(a,b,c)
  %1112 = fadd fast float %1096, %605
  %1113 = fadd fast float %1099, %606
  %1114 = fadd fast float %1102, %607
  %1115 = fadd fast float %1105, %605
  %1116 = fadd fast float %1108, %606
  %1117 = fadd fast float %1111, %607
  %1118 = fadd fast float %1088, %1022
  %1119 = fadd fast float %1088, %1026
  %1120 = fadd fast float %1088, %1030
  %1121 = fmul fast float %1118, %72
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %1119, float %76, float %1121)  ; FMad(a,b,c)
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %1120, float %80, float %1122)  ; FMad(a,b,c)
  %1124 = fmul fast float %1118, %73
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %1119, float %77, float %1124)  ; FMad(a,b,c)
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %1120, float %81, float %1125)  ; FMad(a,b,c)
  %1127 = fmul fast float %1118, %74
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %1119, float %78, float %1127)  ; FMad(a,b,c)
  %1129 = call float @dx.op.tertiary.f32(i32 46, float %1120, float %82, float %1128)  ; FMad(a,b,c)
  %1130 = fmul fast float %646, %277
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %647, float %280, float %1130)  ; FMad(a,b,c)
  %1132 = call float @dx.op.tertiary.f32(i32 46, float %648, float %283, float %1131)  ; FMad(a,b,c)
  %1133 = fadd fast float %1132, %471
  %1134 = fmul fast float %646, %278
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %647, float %281, float %1134)  ; FMad(a,b,c)
  %1136 = call float @dx.op.tertiary.f32(i32 46, float %648, float %284, float %1135)  ; FMad(a,b,c)
  %1137 = fadd fast float %1136, %473
  %1138 = fmul fast float %646, %279
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %647, float %282, float %1138)  ; FMad(a,b,c)
  %1140 = call float @dx.op.tertiary.f32(i32 46, float %648, float %285, float %1139)  ; FMad(a,b,c)
  %1141 = fadd fast float %1140, %475
  %1142 = fcmp fast ole float %1015, 0.000000e+00
  %1143 = fsub fast float -0.000000e+00, %1015
  %1144 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1143)  ; FMax(a,b)
  %1145 = call float @dx.op.binary.f32(i32 36, float %1144, float %1015)  ; FMin(a,b)
  %1146 = select i1 %1142, float 0.000000e+00, float %1145
  %1147 = fcmp fast ole float %1015, 0.000000e+00
  %1148 = fsub fast float -0.000000e+00, %1015
  %1149 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1148)  ; FMax(a,b)
  %1150 = call float @dx.op.binary.f32(i32 36, float %1149, float %1015)  ; FMin(a,b)
  %1151 = select i1 %1147, float 0.000000e+00, float %1150
  %1152 = fmul fast float %1146, %293
  %1153 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %294, float %1152)  ; FMad(a,b,c)
  %1154 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %295, float %1153)  ; FMad(a,b,c)
  %1155 = fmul fast float %1146, %297
  %1156 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %298, float %1155)  ; FMad(a,b,c)
  %1157 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %299, float %1156)  ; FMad(a,b,c)
  %1158 = fmul fast float %1146, %301
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %302, float %1158)  ; FMad(a,b,c)
  %1160 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %303, float %1159)  ; FMad(a,b,c)
  %1161 = fmul fast float %1151, %1001
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1002, float %1161)  ; FMad(a,b,c)
  %1163 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1003, float %1162)  ; FMad(a,b,c)
  %1164 = fmul fast float %1151, %1004
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1005, float %1164)  ; FMad(a,b,c)
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1006, float %1165)  ; FMad(a,b,c)
  %1167 = fmul fast float %1151, %1007
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1008, float %1167)  ; FMad(a,b,c)
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1151, float %1009, float %1168)  ; FMad(a,b,c)
  %1170 = fadd fast float %1154, %646
  %1171 = fadd fast float %1157, %647
  %1172 = fadd fast float %1160, %648
  %1173 = fadd fast float %1163, %646
  %1174 = fadd fast float %1166, %647
  %1175 = fadd fast float %1169, %648
  %1176 = fadd fast float %1146, %1133
  %1177 = fadd fast float %1146, %1137
  %1178 = fadd fast float %1146, %1141
  %1179 = fmul fast float %1176, %72
  %1180 = call float @dx.op.tertiary.f32(i32 46, float %1177, float %76, float %1179)  ; FMad(a,b,c)
  %1181 = call float @dx.op.tertiary.f32(i32 46, float %1178, float %80, float %1180)  ; FMad(a,b,c)
  %1182 = fmul fast float %1176, %73
  %1183 = call float @dx.op.tertiary.f32(i32 46, float %1177, float %77, float %1182)  ; FMad(a,b,c)
  %1184 = call float @dx.op.tertiary.f32(i32 46, float %1178, float %81, float %1183)  ; FMad(a,b,c)
  %1185 = fmul fast float %1176, %74
  %1186 = call float @dx.op.tertiary.f32(i32 46, float %1177, float %78, float %1185)  ; FMad(a,b,c)
  %1187 = call float @dx.op.tertiary.f32(i32 46, float %1178, float %82, float %1186)  ; FMad(a,b,c)
  %1188 = fmul fast float %687, %277
  %1189 = call float @dx.op.tertiary.f32(i32 46, float %688, float %280, float %1188)  ; FMad(a,b,c)
  %1190 = call float @dx.op.tertiary.f32(i32 46, float %689, float %283, float %1189)  ; FMad(a,b,c)
  %1191 = fadd fast float %1190, %471
  %1192 = fmul fast float %687, %278
  %1193 = call float @dx.op.tertiary.f32(i32 46, float %688, float %281, float %1192)  ; FMad(a,b,c)
  %1194 = call float @dx.op.tertiary.f32(i32 46, float %689, float %284, float %1193)  ; FMad(a,b,c)
  %1195 = fadd fast float %1194, %473
  %1196 = fmul fast float %687, %279
  %1197 = call float @dx.op.tertiary.f32(i32 46, float %688, float %282, float %1196)  ; FMad(a,b,c)
  %1198 = call float @dx.op.tertiary.f32(i32 46, float %689, float %285, float %1197)  ; FMad(a,b,c)
  %1199 = fadd fast float %1198, %475
  %1200 = fcmp fast ole float %1015, 0.000000e+00
  %1201 = fsub fast float -0.000000e+00, %1015
  %1202 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1201)  ; FMax(a,b)
  %1203 = call float @dx.op.binary.f32(i32 36, float %1202, float %1015)  ; FMin(a,b)
  %1204 = select i1 %1200, float 0.000000e+00, float %1203
  %1205 = fcmp fast ole float %1015, 0.000000e+00
  %1206 = fsub fast float -0.000000e+00, %1015
  %1207 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1206)  ; FMax(a,b)
  %1208 = call float @dx.op.binary.f32(i32 36, float %1207, float %1015)  ; FMin(a,b)
  %1209 = select i1 %1205, float 0.000000e+00, float %1208
  %1210 = fmul fast float %1204, %293
  %1211 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %294, float %1210)  ; FMad(a,b,c)
  %1212 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %295, float %1211)  ; FMad(a,b,c)
  %1213 = fmul fast float %1204, %297
  %1214 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %298, float %1213)  ; FMad(a,b,c)
  %1215 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %299, float %1214)  ; FMad(a,b,c)
  %1216 = fmul fast float %1204, %301
  %1217 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %302, float %1216)  ; FMad(a,b,c)
  %1218 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %303, float %1217)  ; FMad(a,b,c)
  %1219 = fmul fast float %1209, %1001
  %1220 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1002, float %1219)  ; FMad(a,b,c)
  %1221 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1003, float %1220)  ; FMad(a,b,c)
  %1222 = fmul fast float %1209, %1004
  %1223 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1005, float %1222)  ; FMad(a,b,c)
  %1224 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1006, float %1223)  ; FMad(a,b,c)
  %1225 = fmul fast float %1209, %1007
  %1226 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1008, float %1225)  ; FMad(a,b,c)
  %1227 = call float @dx.op.tertiary.f32(i32 46, float %1209, float %1009, float %1226)  ; FMad(a,b,c)
  %1228 = fadd fast float %1212, %687
  %1229 = fadd fast float %1215, %688
  %1230 = fadd fast float %1218, %689
  %1231 = fadd fast float %1221, %687
  %1232 = fadd fast float %1224, %688
  %1233 = fadd fast float %1227, %689
  %1234 = fadd fast float %1204, %1191
  %1235 = fadd fast float %1204, %1195
  %1236 = fadd fast float %1204, %1199
  %1237 = fmul fast float %1234, %72
  %1238 = call float @dx.op.tertiary.f32(i32 46, float %1235, float %76, float %1237)  ; FMad(a,b,c)
  %1239 = call float @dx.op.tertiary.f32(i32 46, float %1236, float %80, float %1238)  ; FMad(a,b,c)
  %1240 = fmul fast float %1234, %73
  %1241 = call float @dx.op.tertiary.f32(i32 46, float %1235, float %77, float %1240)  ; FMad(a,b,c)
  %1242 = call float @dx.op.tertiary.f32(i32 46, float %1236, float %81, float %1241)  ; FMad(a,b,c)
  %1243 = fmul fast float %1234, %74
  %1244 = call float @dx.op.tertiary.f32(i32 46, float %1235, float %78, float %1243)  ; FMad(a,b,c)
  %1245 = call float @dx.op.tertiary.f32(i32 46, float %1236, float %82, float %1244)  ; FMad(a,b,c)
  br label %1246

; <label>:1246                                    ; preds = %1083, %1031
  %1247 = phi float [ %1082, %1031 ], [ %1245, %1083 ]
  %1248 = phi float [ %687, %1031 ], [ %1231, %1083 ]
  %1249 = phi float [ %646, %1031 ], [ %1173, %1083 ]
  %1250 = phi float [ %605, %1031 ], [ %1115, %1083 ]
  %1251 = phi float [ %688, %1031 ], [ %1232, %1083 ]
  %1252 = phi float [ %647, %1031 ], [ %1174, %1083 ]
  %1253 = phi float [ %606, %1031 ], [ %1116, %1083 ]
  %1254 = phi float [ %689, %1031 ], [ %1233, %1083 ]
  %1255 = phi float [ %648, %1031 ], [ %1175, %1083 ]
  %1256 = phi float [ %607, %1031 ], [ %1117, %1083 ]
  %1257 = phi float [ %687, %1031 ], [ %1228, %1083 ]
  %1258 = phi float [ %646, %1031 ], [ %1170, %1083 ]
  %1259 = phi float [ %605, %1031 ], [ %1112, %1083 ]
  %1260 = phi float [ %688, %1031 ], [ %1229, %1083 ]
  %1261 = phi float [ %647, %1031 ], [ %1171, %1083 ]
  %1262 = phi float [ %606, %1031 ], [ %1113, %1083 ]
  %1263 = phi float [ %689, %1031 ], [ %1230, %1083 ]
  %1264 = phi float [ %648, %1031 ], [ %1172, %1083 ]
  %1265 = phi float [ %607, %1031 ], [ %1114, %1083 ]
  %1266 = phi float [ %1065, %1031 ], [ %1191, %1083 ]
  %1267 = phi float [ %1044, %1031 ], [ %1133, %1083 ]
  %1268 = phi float [ %1069, %1031 ], [ %1195, %1083 ]
  %1269 = phi float [ %1048, %1031 ], [ %1137, %1083 ]
  %1270 = phi float [ %1073, %1031 ], [ %1199, %1083 ]
  %1271 = phi float [ %1052, %1031 ], [ %1141, %1083 ]
  %1272 = phi float [ %1065, %1031 ], [ %1234, %1083 ]
  %1273 = phi float [ %1044, %1031 ], [ %1176, %1083 ]
  %1274 = phi float [ %1022, %1031 ], [ %1118, %1083 ]
  %1275 = phi float [ %1069, %1031 ], [ %1235, %1083 ]
  %1276 = phi float [ %1048, %1031 ], [ %1177, %1083 ]
  %1277 = phi float [ %1026, %1031 ], [ %1119, %1083 ]
  %1278 = phi float [ %1073, %1031 ], [ %1236, %1083 ]
  %1279 = phi float [ %1052, %1031 ], [ %1178, %1083 ]
  %1280 = phi float [ %1030, %1031 ], [ %1120, %1083 ]
  %1281 = phi float [ %1076, %1031 ], [ %1239, %1083 ]
  %1282 = phi float [ %1055, %1031 ], [ %1181, %1083 ]
  %1283 = phi float [ %1034, %1031 ], [ %1123, %1083 ]
  %1284 = phi float [ %1079, %1031 ], [ %1242, %1083 ]
  %1285 = phi float [ %1058, %1031 ], [ %1184, %1083 ]
  %1286 = phi float [ %1037, %1031 ], [ %1126, %1083 ]
  %1287 = phi float [ %1061, %1031 ], [ %1187, %1083 ]
  %1288 = phi float [ %1040, %1031 ], [ %1129, %1083 ]
  %1289 = fadd float %86, %1288
  %1290 = fadd float %86, %1287
  %1291 = fadd float %85, %1286
  %1292 = fadd float %85, %1285
  %1293 = fadd float %85, %1284
  %1294 = fadd float %84, %1283
  %1295 = fadd float %84, %1282
  %1296 = fadd float %84, %1281
  %1297 = fadd fast float %1247, %86
  %1298 = fmul fast float %36, 2.560000e+02
  %1299 = fmul fast float %37, 2.560000e+02
  %1300 = fdiv fast float 1.000000e+00, %1289
  %1301 = fdiv fast float 1.000000e+00, %1290
  %1302 = fdiv fast float 1.000000e+00, %1297
  %1303 = fmul fast float %1300, %1294
  %1304 = fmul fast float %1300, %1291
  %1305 = fmul fast float %1301, %1295
  %1306 = fmul fast float %1301, %1292
  %1307 = fmul fast float %1302, %1296
  %1308 = fmul fast float %1302, %1293
  %1309 = fsub fast float %1308, %1306
  %1310 = fsub fast float %1304, %1308
  %1311 = fsub fast float %1306, %1304
  %1312 = fsub fast float %1305, %1307
  %1313 = fsub fast float %1307, %1303
  %1314 = fsub fast float %1303, %1305
  %1315 = fsub fast float %1298, %1305
  %1316 = fsub fast float %1298, %1307
  %1317 = fsub fast float %1298, %1303
  %1318 = fmul fast float %1309, %1315
  %1319 = fmul fast float %1310, %1316
  %1320 = fmul fast float %1311, %1317
  %1321 = fsub fast float %1299, %1306
  %1322 = fsub fast float %1299, %1308
  %1323 = fsub fast float %1299, %1304
  %1324 = fmul fast float %1312, %1321
  %1325 = fmul fast float %1313, %1322
  %1326 = fmul fast float %1314, %1323
  %1327 = fadd fast float %1318, %1324
  %1328 = fadd fast float %1319, %1325
  %1329 = fadd fast float %1320, %1326
  %1330 = fmul fast float %1328, %1301
  %1331 = fmul fast float %1329, %1302
  %1332 = call float @dx.op.dot3.f32(i32 55, float %1327, float %1328, float %1329, float %1300, float %1301, float %1302)  ; Dot3(ax,ay,az,bx,by,bz)
  %1333 = fdiv fast float 1.000000e+00, %1332
  %1334 = fmul fast float %1333, %1300
  %1335 = fmul fast float %1334, %1327
  %1336 = fmul fast float %1330, %1333
  %1337 = fmul fast float %1331, %1333
  %1338 = fmul fast float %1311, %1302
  %1339 = fmul fast float %1314, %1302
  %1340 = call float @dx.op.dot3.f32(i32 55, float %1309, float %1310, float %1311, float %1300, float %1301, float %1302)  ; Dot3(ax,ay,az,bx,by,bz)
  %1341 = call float @dx.op.dot3.f32(i32 55, float %1312, float %1313, float %1314, float %1300, float %1301, float %1302)  ; Dot3(ax,ay,az,bx,by,bz)
  %1342 = fmul fast float %1332, %1301
  %1343 = fmul fast float %1342, %1310
  %1344 = fmul fast float %1338, %1332
  %1345 = fmul fast float %1330, %1340
  %1346 = fmul fast float %1331, %1340
  %1347 = fsub fast float %1343, %1345
  %1348 = fsub fast float %1344, %1346
  %1349 = fmul fast float %1333, %1333
  %1350 = fmul fast float %1349, 2.560000e+02
  %1351 = fmul fast float %1350, %1347
  %1352 = fmul fast float %1350, %1348
  %1353 = fmul fast float %1342, %1313
  %1354 = fmul fast float %1339, %1332
  %1355 = fmul fast float %1330, %1341
  %1356 = fmul fast float %1331, %1341
  %1357 = fsub fast float %1353, %1355
  %1358 = fsub fast float %1354, %1356
  %1359 = fmul fast float %1350, %1357
  %1360 = fmul fast float %1350, %1358
  %1361 = fmul fast float %756, %1335
  %1362 = fmul fast float %757, %1335
  %1363 = fmul fast float %758, %1335
  %1364 = fmul fast float %823, %1336
  %1365 = fmul fast float %824, %1336
  %1366 = fmul fast float %825, %1336
  %1367 = fmul fast float %884, %1337
  %1368 = fmul fast float %885, %1337
  %1369 = fmul fast float %886, %1337
  %1370 = fadd fast float %1364, %1367
  %1371 = fadd fast float %1370, %1361
  %1372 = fadd fast float %1365, %1368
  %1373 = fadd fast float %1372, %1362
  %1374 = fadd fast float %1366, %1369
  %1375 = fadd fast float %1374, %1363
  %1376 = call float @dx.op.dot3.f32(i32 55, float %1371, float %1373, float %1375, float %1371, float %1373, float %1375)  ; Dot3(ax,ay,az,bx,by,bz)
  %1377 = call float @dx.op.unary.f32(i32 25, float %1376)  ; Rsqrt(value)
  %1378 = fmul fast float %1371, %1377
  %1379 = fmul fast float %1373, %1377
  %1380 = fmul fast float %1375, %1377
  %1381 = fsub fast float %994, %995
  %1382 = fsub fast float %997, %998
  %1383 = fsub fast float %993, %995
  %1384 = fsub fast float %996, %998
  br i1 %941, label %1385, label %1398

; <label>:1385                                    ; preds = %1246
  %1386 = fmul fast float %1378, %291
  %1387 = fmul fast float %1379, %291
  %1388 = fmul fast float %1380, %291
  %1389 = fmul fast float %1386, %277
  %1390 = call float @dx.op.tertiary.f32(i32 46, float %1387, float %280, float %1389)  ; FMad(a,b,c)
  %1391 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %283, float %1390)  ; FMad(a,b,c)
  %1392 = fmul fast float %1386, %278
  %1393 = call float @dx.op.tertiary.f32(i32 46, float %1387, float %281, float %1392)  ; FMad(a,b,c)
  %1394 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %284, float %1393)  ; FMad(a,b,c)
  %1395 = fmul fast float %1386, %279
  %1396 = call float @dx.op.tertiary.f32(i32 46, float %1387, float %282, float %1395)  ; FMad(a,b,c)
  %1397 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %285, float %1396)  ; FMad(a,b,c)
  br label %1528

; <label>:1398                                    ; preds = %1246
  %1399 = fsub fast float %1258, %1259
  %1400 = fsub fast float %1261, %1262
  %1401 = fsub fast float %1264, %1265
  %1402 = fsub fast float %1257, %1259
  %1403 = fsub fast float %1260, %1262
  %1404 = fsub fast float %1263, %1265
  %1405 = call float @dx.op.unary.f32(i32 6, float %1381)  ; FAbs(value)
  %1406 = call float @dx.op.unary.f32(i32 6, float %1383)  ; FAbs(value)
  %1407 = fadd fast float %1406, %1405
  %1408 = fcmp fast ogt float %1407, 0x3EB0C6F7A0000000
  br i1 %1408, label %1428, label %1409

; <label>:1409                                    ; preds = %1398
  %1410 = fcmp fast oge float %1380, 0.000000e+00
  %1411 = select i1 %1410, float 1.000000e+00, float -1.000000e+00
  %1412 = fadd fast float %1411, %1380
  %1413 = fdiv fast float 1.000000e+00, %1412
  %1414 = fsub fast float -0.000000e+00, %1413
  %1415 = fmul fast float %1378, %1379
  %1416 = fmul fast float %1415, %1414
  %1417 = fmul fast float %1378, %1378
  %1418 = fmul fast float %1417, %1411
  %1419 = fmul fast float %1418, %1414
  %1420 = fadd fast float %1419, 1.000000e+00
  %1421 = fmul fast float %1416, %1411
  %1422 = fmul fast float %1378, %1411
  %1423 = fsub fast float -0.000000e+00, %1422
  %1424 = fmul fast float %1379, %1379
  %1425 = fmul fast float %1424, %1414
  %1426 = fadd fast float %1425, %1411
  %1427 = fsub fast float -0.000000e+00, %1379
  br label %1485

; <label>:1428                                    ; preds = %1398
  %1429 = fmul fast float %1379, %1404
  %1430 = fmul fast float %1380, %1403
  %1431 = fsub fast float %1429, %1430
  %1432 = fmul fast float %1380, %1402
  %1433 = fmul fast float %1378, %1404
  %1434 = fsub fast float %1432, %1433
  %1435 = fmul fast float %1378, %1403
  %1436 = fmul fast float %1379, %1402
  %1437 = fsub fast float %1435, %1436
  %1438 = fmul fast float %1380, %1400
  %1439 = fmul fast float %1379, %1401
  %1440 = fsub fast float %1438, %1439
  %1441 = fmul fast float %1378, %1401
  %1442 = fmul fast float %1380, %1399
  %1443 = fsub fast float %1441, %1442
  %1444 = fmul fast float %1379, %1399
  %1445 = fmul fast float %1378, %1400
  %1446 = fsub fast float %1444, %1445
  %1447 = fmul fast float %1431, %1381
  %1448 = fmul fast float %1434, %1381
  %1449 = fmul fast float %1437, %1381
  %1450 = fmul fast float %1440, %1383
  %1451 = fmul fast float %1443, %1383
  %1452 = fmul fast float %1446, %1383
  %1453 = fadd fast float %1447, %1450
  %1454 = fadd fast float %1448, %1451
  %1455 = fadd fast float %1449, %1452
  %1456 = fmul fast float %1431, %1382
  %1457 = fmul fast float %1434, %1382
  %1458 = fmul fast float %1437, %1382
  %1459 = fmul fast float %1440, %1384
  %1460 = fmul fast float %1443, %1384
  %1461 = fmul fast float %1446, %1384
  %1462 = fadd fast float %1456, %1459
  %1463 = fadd fast float %1457, %1460
  %1464 = fadd fast float %1458, %1461
  %1465 = call float @dx.op.dot3.f32(i32 55, float %1453, float %1454, float %1455, float %1453, float %1454, float %1455)  ; Dot3(ax,ay,az,bx,by,bz)
  %1466 = call float @dx.op.unary.f32(i32 25, float %1465)  ; Rsqrt(value)
  %1467 = fmul fast float %1466, %1453
  %1468 = fmul fast float %1466, %1454
  %1469 = fmul fast float %1466, %1455
  %1470 = fmul fast float %1469, %1379
  %1471 = fmul fast float %1468, %1380
  %1472 = fsub fast float %1470, %1471
  %1473 = fmul fast float %1467, %1380
  %1474 = fmul fast float %1469, %1378
  %1475 = fsub fast float %1473, %1474
  %1476 = fmul fast float %1468, %1378
  %1477 = fmul fast float %1467, %1379
  %1478 = fsub fast float %1476, %1477
  %1479 = call float @dx.op.dot3.f32(i32 55, float %1462, float %1463, float %1464, float %1472, float %1475, float %1478)  ; Dot3(ax,ay,az,bx,by,bz)
  %1480 = fcmp fast olt float %1479, 0.000000e+00
  %1481 = select i1 %1480, float -1.000000e+00, float 1.000000e+00
  %1482 = fmul fast float %1472, %1481
  %1483 = fmul fast float %1475, %1481
  %1484 = fmul fast float %1478, %1481
  br label %1485

; <label>:1485                                    ; preds = %1428, %1409
  %1486 = phi float [ %1467, %1428 ], [ %1420, %1409 ]
  %1487 = phi float [ %1468, %1428 ], [ %1421, %1409 ]
  %1488 = phi float [ %1469, %1428 ], [ %1423, %1409 ]
  %1489 = phi float [ %1482, %1428 ], [ %1416, %1409 ]
  %1490 = phi float [ %1483, %1428 ], [ %1426, %1409 ]
  %1491 = phi float [ %1484, %1428 ], [ %1427, %1409 ]
  %1492 = fmul fast float %277, %289
  %1493 = fmul fast float %278, %289
  %1494 = fmul fast float %279, %289
  %1495 = fmul fast float %280, %290
  %1496 = fmul fast float %281, %290
  %1497 = fmul fast float %282, %290
  %1498 = fmul fast float %291, %283
  %1499 = fmul fast float %291, %284
  %1500 = fmul fast float %291, %285
  %1501 = fmul fast float %1486, %1492
  %1502 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1495, float %1501)  ; FMad(a,b,c)
  %1503 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1498, float %1502)  ; FMad(a,b,c)
  %1504 = fmul fast float %1486, %1493
  %1505 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1496, float %1504)  ; FMad(a,b,c)
  %1506 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1499, float %1505)  ; FMad(a,b,c)
  %1507 = fmul fast float %1486, %1494
  %1508 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1497, float %1507)  ; FMad(a,b,c)
  %1509 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1500, float %1508)  ; FMad(a,b,c)
  %1510 = fmul fast float %1489, %1492
  %1511 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1495, float %1510)  ; FMad(a,b,c)
  %1512 = call float @dx.op.tertiary.f32(i32 46, float %1491, float %1498, float %1511)  ; FMad(a,b,c)
  %1513 = fmul fast float %1489, %1493
  %1514 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1496, float %1513)  ; FMad(a,b,c)
  %1515 = call float @dx.op.tertiary.f32(i32 46, float %1491, float %1499, float %1514)  ; FMad(a,b,c)
  %1516 = fmul fast float %1489, %1494
  %1517 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1497, float %1516)  ; FMad(a,b,c)
  %1518 = call float @dx.op.tertiary.f32(i32 46, float %1491, float %1500, float %1517)  ; FMad(a,b,c)
  %1519 = fmul fast float %1378, %1492
  %1520 = call float @dx.op.tertiary.f32(i32 46, float %1379, float %1495, float %1519)  ; FMad(a,b,c)
  %1521 = call float @dx.op.tertiary.f32(i32 46, float %1380, float %1498, float %1520)  ; FMad(a,b,c)
  %1522 = fmul fast float %1378, %1493
  %1523 = call float @dx.op.tertiary.f32(i32 46, float %1379, float %1496, float %1522)  ; FMad(a,b,c)
  %1524 = call float @dx.op.tertiary.f32(i32 46, float %1380, float %1499, float %1523)  ; FMad(a,b,c)
  %1525 = fmul fast float %1378, %1494
  %1526 = call float @dx.op.tertiary.f32(i32 46, float %1379, float %1497, float %1525)  ; FMad(a,b,c)
  %1527 = call float @dx.op.tertiary.f32(i32 46, float %1380, float %1500, float %1526)  ; FMad(a,b,c)
  br label %1528

; <label>:1528                                    ; preds = %1485, %1385
  %1529 = phi float [ %1503, %1485 ], [ 0.000000e+00, %1385 ]
  %1530 = phi float [ %1506, %1485 ], [ 0.000000e+00, %1385 ]
  %1531 = phi float [ %1509, %1485 ], [ 0.000000e+00, %1385 ]
  %1532 = phi float [ %1512, %1485 ], [ 0.000000e+00, %1385 ]
  %1533 = phi float [ %1515, %1485 ], [ 0.000000e+00, %1385 ]
  %1534 = phi float [ %1518, %1485 ], [ 0.000000e+00, %1385 ]
  %1535 = phi float [ %1521, %1485 ], [ %1391, %1385 ]
  %1536 = phi float [ %1524, %1485 ], [ %1394, %1385 ]
  %1537 = phi float [ %1527, %1485 ], [ %1397, %1385 ]
  %1538 = fmul fast float %1336, %1381
  %1539 = fmul fast float %1336, %1382
  %1540 = fmul fast float %1337, %1383
  %1541 = fmul fast float %1337, %1384
  %1542 = fadd fast float %1540, %995
  %1543 = fadd fast float %1542, %1538
  %1544 = fadd fast float %1541, %998
  %1545 = fadd fast float %1544, %1539
  %1546 = fmul fast float %1351, %1381
  %1547 = fmul fast float %1351, %1382
  %1548 = fmul fast float %1352, %1383
  %1549 = fmul fast float %1352, %1384
  %1550 = fadd fast float %1546, %1548
  %1551 = fadd fast float %1547, %1549
  %1552 = fmul fast float %1359, %1381
  %1553 = fmul fast float %1359, %1382
  %1554 = fmul fast float %1360, %1383
  %1555 = fmul fast float %1360, %1384
  %1556 = fadd fast float %1552, %1554
  %1557 = fadd fast float %1553, %1555
  %1558 = fmul fast float %1335, %1250
  %1559 = fmul fast float %1335, %1253
  %1560 = fmul fast float %1335, %1256
  %1561 = fmul fast float %1336, %1249
  %1562 = fmul fast float %1336, %1252
  %1563 = fmul fast float %1336, %1255
  %1564 = fmul fast float %1337, %1248
  %1565 = fmul fast float %1337, %1251
  %1566 = fmul fast float %1337, %1254
  %1567 = fadd fast float %1561, %1564
  %1568 = fadd fast float %1567, %1558
  %1569 = fadd fast float %1562, %1565
  %1570 = fadd fast float %1569, %1559
  %1571 = fadd fast float %1563, %1566
  %1572 = fadd fast float %1571, %1560
  %1573 = fmul fast float %1568, %452
  %1574 = call float @dx.op.tertiary.f32(i32 46, float %1570, float %455, float %1573)  ; FMad(a,b,c)
  %1575 = call float @dx.op.tertiary.f32(i32 46, float %1572, float %458, float %1574)  ; FMad(a,b,c)
  %1576 = fadd fast float %467, %108
  %1577 = fadd fast float %1576, %461
  %1578 = fadd fast float %1577, %1575
  %1579 = fmul fast float %1568, %453
  %1580 = call float @dx.op.tertiary.f32(i32 46, float %1570, float %456, float %1579)  ; FMad(a,b,c)
  %1581 = call float @dx.op.tertiary.f32(i32 46, float %1572, float %459, float %1580)  ; FMad(a,b,c)
  %1582 = fadd fast float %468, %109
  %1583 = fadd fast float %1582, %462
  %1584 = fadd fast float %1583, %1581
  %1585 = fmul fast float %1568, %454
  %1586 = call float @dx.op.tertiary.f32(i32 46, float %1570, float %457, float %1585)  ; FMad(a,b,c)
  %1587 = call float @dx.op.tertiary.f32(i32 46, float %1572, float %460, float %1586)  ; FMad(a,b,c)
  %1588 = fadd fast float %469, %110
  %1589 = fadd fast float %1588, %463
  %1590 = fadd fast float %1589, %1587
  %1591 = fmul fast float %1578, %88
  %1592 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %93, float %1591)  ; FMad(a,b,c)
  %1593 = call float @dx.op.tertiary.f32(i32 46, float %1590, float %98, float %1592)  ; FMad(a,b,c)
  %1594 = fadd fast float %1593, %103
  %1595 = fmul fast float %1578, %89
  %1596 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %94, float %1595)  ; FMad(a,b,c)
  %1597 = call float @dx.op.tertiary.f32(i32 46, float %1590, float %99, float %1596)  ; FMad(a,b,c)
  %1598 = fadd fast float %1597, %104
  %1599 = fmul fast float %1578, %90
  %1600 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %95, float %1599)  ; FMad(a,b,c)
  %1601 = call float @dx.op.tertiary.f32(i32 46, float %1590, float %100, float %1600)  ; FMad(a,b,c)
  %1602 = fadd fast float %1601, %105
  %1603 = fmul fast float %1578, %91
  %1604 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %96, float %1603)  ; FMad(a,b,c)
  %1605 = call float @dx.op.tertiary.f32(i32 46, float %1590, float %101, float %1604)  ; FMad(a,b,c)
  %1606 = fadd fast float %1605, %106
  %1607 = fmul fast float %1335, %1274
  %1608 = fmul fast float %1335, %1277
  %1609 = fmul fast float %1335, %1280
  %1610 = fmul fast float %1336, %1273
  %1611 = fmul fast float %1336, %1276
  %1612 = fmul fast float %1336, %1279
  %1613 = fmul fast float %1337, %1272
  %1614 = fmul fast float %1337, %1275
  %1615 = fmul fast float %1337, %1278
  %1616 = fadd fast float %1610, %1613
  %1617 = fadd fast float %1616, %1607
  %1618 = fadd fast float %1611, %1614
  %1619 = fadd fast float %1618, %1608
  %1620 = fadd fast float %1612, %1615
  %1621 = fadd fast float %1620, %1609
  %1622 = fmul fast float %1335, %1022
  %1623 = fmul fast float %1335, %1026
  %1624 = fmul fast float %1335, %1030
  %1625 = fmul fast float %1336, %1267
  %1626 = fmul fast float %1336, %1269
  %1627 = fmul fast float %1336, %1271
  %1628 = fmul fast float %1337, %1266
  %1629 = fmul fast float %1337, %1268
  %1630 = fmul fast float %1337, %1270
  %1631 = fadd fast float %1625, %1628
  %1632 = fadd fast float %1631, %1622
  %1633 = fadd fast float %1626, %1629
  %1634 = fadd fast float %1633, %1623
  %1635 = fadd fast float %1627, %1630
  %1636 = fadd fast float %1635, %1624
  %1637 = fmul fast float %1335, %1289
  %1638 = fmul fast float %1336, %1290
  %1639 = fmul fast float %1337, %1297
  %1640 = fadd fast float %1638, %1639
  %1641 = fadd fast float %1640, %1637
  %1642 = fsub fast float %36, %54
  %1643 = fsub fast float %37, %55
  %1644 = fmul fast float %1642, %57
  %1645 = fmul fast float %1643, %58
  %1646 = fadd fast float %1644, -5.000000e-01
  %1647 = fadd fast float %1645, -5.000000e-01
  %1648 = fmul fast float %1646, 2.000000e+00
  %1649 = fmul fast float %1647, -2.000000e+00
  %1650 = fmul fast float %1648, %1641
  %1651 = fmul fast float %1649, %1641
  %1652 = fmul fast float %1641, %121
  br label %1653

; <label>:1653                                    ; preds = %1528, %0
  %1654 = phi float [ %1650, %1528 ], [ 0.000000e+00, %0 ]
  %1655 = phi float [ %1651, %1528 ], [ 0.000000e+00, %0 ]
  %1656 = phi float [ %1652, %1528 ], [ 0.000000e+00, %0 ]
  %1657 = phi float [ %1641, %1528 ], [ 0.000000e+00, %0 ]
  %1658 = phi float [ %1594, %1528 ], [ 0.000000e+00, %0 ]
  %1659 = phi float [ %1598, %1528 ], [ 0.000000e+00, %0 ]
  %1660 = phi float [ %1602, %1528 ], [ 0.000000e+00, %0 ]
  %1661 = phi float [ %1606, %1528 ], [ 0.000000e+00, %0 ]
  %1662 = phi float [ %1529, %1528 ], [ 1.000000e+00, %0 ]
  %1663 = phi float [ %1530, %1528 ], [ 0.000000e+00, %0 ]
  %1664 = phi float [ %1531, %1528 ], [ 0.000000e+00, %0 ]
  %1665 = phi float [ %1532, %1528 ], [ 0.000000e+00, %0 ]
  %1666 = phi float [ %1533, %1528 ], [ 1.000000e+00, %0 ]
  %1667 = phi float [ %1534, %1528 ], [ 0.000000e+00, %0 ]
  %1668 = phi float [ %1535, %1528 ], [ 0.000000e+00, %0 ]
  %1669 = phi float [ %1536, %1528 ], [ 0.000000e+00, %0 ]
  %1670 = phi float [ %1537, %1528 ], [ 1.000000e+00, %0 ]
  %1671 = phi float [ %1617, %1528 ], [ 0.000000e+00, %0 ]
  %1672 = phi float [ %1619, %1528 ], [ 0.000000e+00, %0 ]
  %1673 = phi float [ %1621, %1528 ], [ 0.000000e+00, %0 ]
  %1674 = phi float [ %1632, %1528 ], [ 0.000000e+00, %0 ]
  %1675 = phi float [ %1634, %1528 ], [ 0.000000e+00, %0 ]
  %1676 = phi float [ %1636, %1528 ], [ 0.000000e+00, %0 ]
  %1677 = phi i32 [ %145, %1528 ], [ 0, %0 ]
  %1678 = phi float [ %1557, %1528 ], [ 0.000000e+00, %0 ]
  %1679 = phi float [ %1556, %1528 ], [ 0.000000e+00, %0 ]
  %1680 = phi float [ %1551, %1528 ], [ 0.000000e+00, %0 ]
  %1681 = phi float [ %1550, %1528 ], [ 0.000000e+00, %0 ]
  %1682 = phi float [ %1545, %1528 ], [ 0.000000e+00, %0 ]
  %1683 = phi float [ %1543, %1528 ], [ 0.000000e+00, %0 ]
  %1684 = fsub fast float %1671, %45
  %1685 = fsub fast float %1672, %46
  %1686 = fsub fast float %1673, %47
  %1687 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1688 = extractvalue %dx.types.CBufRet.f32 %1687, 0
  %1689 = fmul fast float %1688, %1683
  %1690 = fmul fast float %1688, %1682
  %1691 = fmul fast float %1688, %1681
  %1692 = fmul fast float %1688, %1680
  %1693 = fmul fast float %1688, %1679
  %1694 = fmul fast float %1688, %1678
  %1695 = fadd fast float %1689, -5.000000e-01
  %1696 = fadd fast float %1690, 5.000000e-01
  %1697 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1698 = extractvalue %dx.types.CBufRet.f32 %1697, 0
  %1699 = extractvalue %dx.types.CBufRet.f32 %1697, 1
  %1700 = fmul fast float %1695, %1698
  %1701 = fmul fast float %1691, %1698
  %1702 = fmul fast float %1693, %1698
  %1703 = fmul fast float %1696, %1699
  %1704 = fmul fast float %1692, %1699
  %1705 = fmul fast float %1694, %1699
  %1706 = fadd fast float %1701, %1704
  %1707 = fadd fast float %1702, %1705
  %1708 = extractvalue %dx.types.CBufRet.f32 %1697, 2
  %1709 = extractvalue %dx.types.CBufRet.f32 %1697, 3
  %1710 = fmul fast float %1695, %1708
  %1711 = fmul fast float %1708, %1691
  %1712 = fmul fast float %1708, %1693
  %1713 = fmul fast float %1696, %1709
  %1714 = fmul fast float %1709, %1692
  %1715 = fmul fast float %1709, %1694
  %1716 = fadd fast float %1711, %1714
  %1717 = fadd fast float %1712, %1715
  %1718 = fadd fast float %1703, 5.000000e-01
  %1719 = fadd fast float %1718, %1700
  %1720 = fadd fast float %1713, -5.000000e-01
  %1721 = fadd fast float %1720, %1710
  %1722 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 144)  ; CBufferLoadLegacy(handle,regIndex)
  %1723 = extractvalue %dx.types.CBufRet.f32 %1722, 0
  %1724 = call float @dx.op.unary.f32(i32 21, float %1723)  ; Exp(value)
  %1725 = fmul fast float %1707, %1724
  %1726 = fmul fast float %1717, %1724
  %1727 = fmul fast float %1724, %1706
  %1728 = fmul fast float %1724, %1716
  %1729 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1730 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1731 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1729, %dx.types.Handle %1730, float %1719, float %1721, float undef, float undef, i32 0, i32 0, i32 undef, float %1727, float %1728, float undef, float %1725, float %1726, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1732 = extractvalue %dx.types.ResRet.f32 %1731, 0
  %1733 = extractvalue %dx.types.ResRet.f32 %1731, 1
  %1734 = extractvalue %dx.types.ResRet.f32 %1731, 2
  %1735 = fadd fast float %1732, -5.000000e-01
  %1736 = fadd fast float %1733, -5.000000e-01
  %1737 = fmul fast float %1735, 2.000000e+00
  %1738 = fmul fast float %1736, 2.000000e+00
  %1739 = call float @dx.op.dot2.f32(i32 54, float %1737, float %1738, float %1737, float %1738)  ; Dot2(ax,ay,bx,by)
  %1740 = fsub fast float 1.000000e+00, %1739
  %1741 = call float @dx.op.unary.f32(i32 7, float %1740)  ; Saturate(value)
  %1742 = call float @dx.op.unary.f32(i32 24, float %1741)  ; Sqrt(value)
  %1743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1744 = extractvalue %dx.types.CBufRet.f32 %1743, 0
  %1745 = fmul fast float %1737, %63
  %1746 = fmul fast float %1745, %1744
  %1747 = fmul fast float %1738, %63
  %1748 = fmul fast float %1747, %1744
  %1749 = fmul fast float %1742, %63
  %1750 = fadd fast float %1746, %60
  %1751 = fadd fast float %1748, %61
  %1752 = fadd fast float %1749, %62
  %1753 = call float @dx.op.dot3.f32(i32 55, float %1750, float %1751, float %1752, float %1750, float %1751, float %1752)  ; Dot3(ax,ay,az,bx,by,bz)
  %1754 = call float @dx.op.unary.f32(i32 25, float %1753)  ; Rsqrt(value)
  %1755 = fmul fast float %1750, %1754
  %1756 = fmul fast float %1751, %1754
  %1757 = fmul fast float %1754, %1752
  %1758 = fmul fast float %1755, %1662
  %1759 = call float @dx.op.tertiary.f32(i32 46, float %1756, float %1665, float %1758)  ; FMad(a,b,c)
  %1760 = call float @dx.op.tertiary.f32(i32 46, float %1757, float %1668, float %1759)  ; FMad(a,b,c)
  %1761 = fmul fast float %1755, %1663
  %1762 = call float @dx.op.tertiary.f32(i32 46, float %1756, float %1666, float %1761)  ; FMad(a,b,c)
  %1763 = call float @dx.op.tertiary.f32(i32 46, float %1757, float %1669, float %1762)  ; FMad(a,b,c)
  %1764 = fmul fast float %1755, %1664
  %1765 = call float @dx.op.tertiary.f32(i32 46, float %1756, float %1667, float %1764)  ; FMad(a,b,c)
  %1766 = call float @dx.op.tertiary.f32(i32 46, float %1757, float %1670, float %1765)  ; FMad(a,b,c)
  %1767 = call float @dx.op.dot3.f32(i32 55, float %1760, float %1763, float %1766, float %1760, float %1763, float %1766)  ; Dot3(ax,ay,az,bx,by,bz)
  %1768 = call float @dx.op.unary.f32(i32 25, float %1767)  ; Rsqrt(value)
  %1769 = fmul fast float %1768, %1760
  %1770 = fmul fast float %1768, %1763
  %1771 = fmul fast float %1768, %1766
  %1772 = extractvalue %dx.types.CBufRet.f32 %1743, 1
  %1773 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1774 = extractvalue %dx.types.CBufRet.f32 %1773, 0
  %1775 = extractvalue %dx.types.CBufRet.f32 %1773, 1
  %1776 = extractvalue %dx.types.CBufRet.f32 %1773, 2
  %1777 = fmul fast float %1774, %1772
  %1778 = fmul fast float %1775, %1772
  %1779 = fmul fast float %1776, %1772
  %1780 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1781 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1782 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1780, %dx.types.Handle %1781, float %1719, float %1721, float undef, float undef, i32 0, i32 0, i32 undef, float %1727, float %1728, float undef, float %1725, float %1726, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1783 = extractvalue %dx.types.ResRet.f32 %1782, 0
  %1784 = extractvalue %dx.types.ResRet.f32 %1782, 1
  %1785 = extractvalue %dx.types.ResRet.f32 %1782, 2
  %1786 = extractvalue %dx.types.ResRet.f32 %1782, 3
  %1787 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1788 = extractvalue %dx.types.CBufRet.f32 %1787, 0
  %1789 = extractvalue %dx.types.CBufRet.f32 %1787, 1
  %1790 = extractvalue %dx.types.CBufRet.f32 %1787, 2
  %1791 = fmul fast float %1788, %1783
  %1792 = fmul fast float %1789, %1784
  %1793 = fmul fast float %1790, %1785
  %1794 = extractvalue %dx.types.CBufRet.f32 %1787, 3
  %1795 = fmul fast float %1794, %1734
  %1796 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1797 = extractvalue %dx.types.CBufRet.f32 %1796, 0
  %1798 = fcmp fast ole float %1786, 0.000000e+00
  %1799 = call float @dx.op.unary.f32(i32 23, float %1786)  ; Log(value)
  %1800 = fmul fast float %1799, %1797
  %1801 = call float @dx.op.unary.f32(i32 21, float %1800)  ; Exp(value)
  %1802 = select i1 %1798, float 0.000000e+00, float %1801
  %1803 = call float @dx.op.unary.f32(i32 7, float %1791)  ; Saturate(value)
  %1804 = call float @dx.op.unary.f32(i32 7, float %1792)  ; Saturate(value)
  %1805 = call float @dx.op.unary.f32(i32 7, float %1793)  ; Saturate(value)
  %1806 = call float @dx.op.unary.f32(i32 7, float %1795)  ; Saturate(value)
  %1807 = call float @dx.op.unary.f32(i32 7, float %1802)  ; Saturate(value)
  %1808 = fmul fast float %1807, %66
  %1809 = fadd fast float %1808, %65
  %1810 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1811 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %1677, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1812 = extractvalue %dx.types.ResRet.f32 %1811, 0
  %1813 = bitcast float %1812 to i32
  %1814 = and i32 %1813, 8
  %1815 = icmp ne i32 %1814, 0
  %1816 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %1817 = extractvalue %dx.types.CBufRet.f32 %1816, 3
  %1818 = fcmp fast ogt float %1817, 0.000000e+00
  %1819 = and i1 %1818, %1815
  br i1 %1819, label %1820, label %1874, !dx.controlflow.hints !70

; <label>:1820                                    ; preds = %1653
  %1821 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1822 = extractvalue %dx.types.CBufRet.f32 %1821, 2
  %1823 = extractvalue %dx.types.CBufRet.f32 %1821, 3
  %1824 = fmul fast float %1822, %36
  %1825 = fmul fast float %1823, %37
  %1826 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1827 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1828 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1826, %dx.types.Handle %1827, float %1824, float %1825, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1829 = extractvalue %dx.types.ResRet.f32 %1828, 0
  %1830 = extractvalue %dx.types.ResRet.f32 %1828, 1
  %1831 = extractvalue %dx.types.ResRet.f32 %1828, 2
  %1832 = extractvalue %dx.types.ResRet.f32 %1828, 3
  %1833 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1834 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1835 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1833, %dx.types.Handle %1834, float %1824, float %1825, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1836 = extractvalue %dx.types.ResRet.f32 %1835, 0
  %1837 = extractvalue %dx.types.ResRet.f32 %1835, 1
  %1838 = extractvalue %dx.types.ResRet.f32 %1835, 2
  %1839 = extractvalue %dx.types.ResRet.f32 %1835, 3
  %1840 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1841 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1842 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1840, %dx.types.Handle %1841, float %1824, float %1825, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1843 = extractvalue %dx.types.ResRet.f32 %1842, 0
  %1844 = extractvalue %dx.types.ResRet.f32 %1842, 1
  %1845 = extractvalue %dx.types.ResRet.f32 %1842, 2
  %1846 = extractvalue %dx.types.ResRet.f32 %1842, 3
  %1847 = fmul fast float %1836, 2.000000e+00
  %1848 = fmul fast float %1837, 2.000000e+00
  %1849 = fmul fast float %1838, 2.000000e+00
  %1850 = fadd fast float %1847, 0xBFF0101020000000
  %1851 = fadd fast float %1848, 0xBFF0101020000000
  %1852 = fadd fast float %1849, 0xBFF0101020000000
  %1853 = fmul fast float %1832, %1803
  %1854 = fmul fast float %1832, %1804
  %1855 = fmul fast float %1832, %1805
  %1856 = fadd fast float %1853, %1829
  %1857 = fadd fast float %1854, %1830
  %1858 = fadd fast float %1855, %1831
  %1859 = fmul fast float %1839, %1769
  %1860 = fmul fast float %1839, %1770
  %1861 = fmul fast float %1839, %1771
  %1862 = fadd fast float %1850, %1859
  %1863 = fadd fast float %1851, %1860
  %1864 = fadd fast float %1852, %1861
  %1865 = call float @dx.op.dot3.f32(i32 55, float %1862, float %1863, float %1864, float %1862, float %1863, float %1864)  ; Dot3(ax,ay,az,bx,by,bz)
  %1866 = call float @dx.op.unary.f32(i32 25, float %1865)  ; Rsqrt(value)
  %1867 = fmul fast float %1866, %1862
  %1868 = fmul fast float %1866, %1863
  %1869 = fmul fast float %1866, %1864
  %1870 = fmul fast float %1846, %1809
  %1871 = fadd fast float %1870, %1845
  %1872 = fmul fast float %1846, %1806
  %1873 = fadd fast float %1872, %1844
  br label %1874

; <label>:1874                                    ; preds = %1820, %1653
  %1875 = phi float [ %1867, %1820 ], [ %1769, %1653 ]
  %1876 = phi float [ %1868, %1820 ], [ %1770, %1653 ]
  %1877 = phi float [ %1869, %1820 ], [ %1771, %1653 ]
  %1878 = phi float [ %1856, %1820 ], [ %1803, %1653 ]
  %1879 = phi float [ %1857, %1820 ], [ %1804, %1653 ]
  %1880 = phi float [ %1858, %1820 ], [ %1805, %1653 ]
  %1881 = phi float [ %1843, %1820 ], [ 0.000000e+00, %1653 ]
  %1882 = phi float [ %1873, %1820 ], [ %1806, %1653 ]
  %1883 = phi float [ %1871, %1820 ], [ %1809, %1653 ]
  %1884 = fmul fast float %41, 2.097152e+06
  %1885 = fmul fast float %42, 2.097152e+06
  %1886 = fmul fast float %43, 2.097152e+06
  %1887 = fadd fast float %1684, %1884
  %1888 = fadd fast float %1685, %1885
  %1889 = fadd fast float %1686, %1886
  %1890 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1891 = extractvalue %dx.types.CBufRet.f32 %1890, 0
  %1892 = extractvalue %dx.types.CBufRet.f32 %1890, 1
  %1893 = extractvalue %dx.types.CBufRet.f32 %1890, 2
  %1894 = fmul fast float %1891, %1887
  %1895 = fmul fast float %1892, %1888
  %1896 = fmul fast float %1893, %1889
  %1897 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1898 = extractvalue %dx.types.CBufRet.f32 %1897, 0
  %1899 = extractvalue %dx.types.CBufRet.f32 %1897, 1
  %1900 = extractvalue %dx.types.CBufRet.f32 %1897, 2
  %1901 = fadd fast float %1894, %1898
  %1902 = fadd fast float %1895, %1899
  %1903 = fadd fast float %1896, %1900
  %1904 = call float @dx.op.binary.f32(i32 35, float %1901, float 0.000000e+00)  ; FMax(a,b)
  %1905 = call float @dx.op.binary.f32(i32 35, float %1902, float 0.000000e+00)  ; FMax(a,b)
  %1906 = call float @dx.op.binary.f32(i32 35, float %1903, float 0.000000e+00)  ; FMax(a,b)
  %1907 = call float @dx.op.binary.f32(i32 36, float %1904, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1908 = call float @dx.op.binary.f32(i32 36, float %1905, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1909 = call float @dx.op.binary.f32(i32 36, float %1906, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1910 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1911 = extractvalue %dx.types.CBufRet.f32 %1910, 0
  %1912 = extractvalue %dx.types.CBufRet.f32 %1910, 1
  %1913 = extractvalue %dx.types.CBufRet.f32 %1910, 2
  %1914 = fmul fast float %1911, %1907
  %1915 = fmul fast float %1912, %1908
  %1916 = fmul fast float %1913, %1909
  %1917 = fptosi float %1914 to i32
  %1918 = fptosi float %1915 to i32
  %1919 = fptosi float %1916 to i32
  %1920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1921 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1920, i32 0, i32 %1917, i32 %1918, i32 %1919, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1922 = extractvalue %dx.types.ResRet.i32 %1921, 0
  %1923 = extractvalue %dx.types.ResRet.i32 %1921, 1
  %1924 = extractvalue %dx.types.ResRet.i32 %1921, 2
  %1925 = extractvalue %dx.types.ResRet.i32 %1921, 3
  %1926 = uitofp i32 %1922 to float
  %1927 = uitofp i32 %1923 to float
  %1928 = uitofp i32 %1924 to float
  %1929 = uitofp i32 %1925 to float
  %1930 = extractvalue %dx.types.CBufRet.f32 %1910, 3
  %1931 = fadd fast float %1930, 1.000000e+00
  %1932 = fmul fast float %1931, %1926
  %1933 = fmul fast float %1931, %1927
  %1934 = fmul fast float %1931, %1928
  %1935 = fdiv fast float %1914, %1929
  %1936 = fdiv fast float %1915, %1929
  %1937 = fdiv fast float %1916, %1929
  %1938 = call float @dx.op.unary.f32(i32 22, float %1935)  ; Frc(value)
  %1939 = call float @dx.op.unary.f32(i32 22, float %1936)  ; Frc(value)
  %1940 = call float @dx.op.unary.f32(i32 22, float %1937)  ; Frc(value)
  %1941 = fmul fast float %1930, %1938
  %1942 = fmul fast float %1930, %1939
  %1943 = fmul fast float %1930, %1940
  %1944 = fadd fast float %1932, 5.000000e-01
  %1945 = fadd fast float %1944, %1941
  %1946 = fadd fast float %1933, 5.000000e-01
  %1947 = fadd fast float %1946, %1942
  %1948 = fadd fast float %1934, 5.000000e-01
  %1949 = fadd fast float %1948, %1943
  %1950 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1951 = extractvalue %dx.types.CBufRet.f32 %1950, 0
  %1952 = extractvalue %dx.types.CBufRet.f32 %1950, 1
  %1953 = extractvalue %dx.types.CBufRet.f32 %1950, 2
  %1954 = fmul fast float %1945, %1951
  %1955 = fmul fast float %1947, %1952
  %1956 = fmul fast float %1949, %1953
  %1957 = and i32 %1813, 256
  %1958 = icmp ne i32 %1957, 0
  %1959 = and i32 %1813, 512
  %1960 = icmp ne i32 %1959, 0
  %1961 = select i1 %1960, float 1.000000e+00, float 0.000000e+00
  %1962 = select i1 %1958, float 2.000000e+00, float 0.000000e+00
  %1963 = fadd fast float %1962, %1961
  %1964 = fmul fast float %1963, 0x3FD5555560000000
  %1965 = and i32 %1813, 4
  %1966 = icmp eq i32 %1965, 0
  br i1 %1966, label %1972, label %1967, !dx.controlflow.hints !71

; <label>:1967                                    ; preds = %1874
  %1968 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1969 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1970 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1968, %dx.types.Handle %1969, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1971 = extractvalue %dx.types.ResRet.f32 %1970, 0
  br label %1972

; <label>:1972                                    ; preds = %1967, %1874
  %1973 = phi float [ %1971, %1967 ], [ 1.000000e+00, %1874 ]
  %1974 = and i32 %1813, 32
  %1975 = icmp eq i32 %1974, 0
  br i1 %1975, label %2023, label %1976, !dx.controlflow.hints !72

; <label>:1976                                    ; preds = %1972
  %1977 = fdiv fast float %1654, %1657
  %1978 = fdiv fast float %1655, %1657
  %1979 = fsub fast float %1977, %49
  %1980 = fsub fast float %1978, %50
  %1981 = fdiv fast float %1658, %1661
  %1982 = fdiv fast float %1659, %1661
  %1983 = fsub fast float %1981, %51
  %1984 = fsub fast float %1982, %52
  %1985 = fdiv fast float %1656, %1657
  %1986 = fdiv fast float %1660, %1661
  %1987 = fsub fast float %1979, %1983
  %1988 = fsub fast float %1980, %1984
  %1989 = fsub fast float %1985, %1986
  %1990 = fcmp fast ogt float %1987, 0.000000e+00
  %1991 = fcmp fast ogt float %1988, 0.000000e+00
  %1992 = fcmp fast olt float %1987, 0.000000e+00
  %1993 = fcmp fast olt float %1988, 0.000000e+00
  %1994 = zext i1 %1990 to i32
  %1995 = zext i1 %1991 to i32
  %1996 = zext i1 %1992 to i32
  %1997 = zext i1 %1993 to i32
  %1998 = sub nsw i32 %1994, %1996
  %1999 = sub nsw i32 %1995, %1997
  %2000 = sitofp i32 %1998 to float
  %2001 = sitofp i32 %1999 to float
  %2002 = call float @dx.op.unary.f32(i32 6, float %1987)  ; FAbs(value)
  %2003 = call float @dx.op.unary.f32(i32 6, float %1988)  ; FAbs(value)
  %2004 = call float @dx.op.unary.f32(i32 24, float %2002)  ; Sqrt(value)
  %2005 = call float @dx.op.unary.f32(i32 24, float %2003)  ; Sqrt(value)
  %2006 = fmul fast float %2004, 0x3FD69508A0000000
  %2007 = fmul fast float %2006, %2000
  %2008 = fmul fast float %2005, 0x3FD69508A0000000
  %2009 = fmul fast float %2008, %2001
  %2010 = fadd fast float %2007, 0x3FDFFFE000000000
  %2011 = fadd fast float %2009, 0x3FDFFFE000000000
  %2012 = bitcast float %1989 to i32
  %2013 = lshr i32 %2012, 16
  %2014 = uitofp i32 %2013 to float
  %2015 = fmul fast float %2014, 0x3EF0001000000000
  %2016 = fadd fast float %2015, 0x3EB999B340000000
  %2017 = call float @dx.op.unary.f32(i32 7, float %2016)  ; Saturate(value)
  %2018 = and i32 %2012, 65535
  %2019 = uitofp i32 %2018 to float
  %2020 = fmul fast float %2019, 0x3EF0001000000000
  %2021 = fadd fast float %2020, 0x3EB999B340000000
  %2022 = call float @dx.op.unary.f32(i32 7, float %2021)  ; Saturate(value)
  br label %2023

; <label>:2023                                    ; preds = %1976, %1972
  %2024 = phi float [ %2010, %1976 ], [ 0.000000e+00, %1972 ]
  %2025 = phi float [ %2011, %1976 ], [ 0.000000e+00, %1972 ]
  %2026 = phi float [ %2017, %1976 ], [ 0.000000e+00, %1972 ]
  %2027 = phi float [ %2022, %1976 ], [ 0.000000e+00, %1972 ]
  %2028 = fmul fast float %1882, 0x3FB47AE140000000
  %2029 = fsub fast float %1878, %2028
  %2030 = fsub fast float %1879, %2028
  %2031 = fsub fast float %1880, %2028
  %2032 = fmul fast float %2029, %1881
  %2033 = fmul fast float %2030, %1881
  %2034 = fmul fast float %2031, %1881
  %2035 = fadd fast float %2032, %2028
  %2036 = fadd fast float %2033, %2028
  %2037 = fadd fast float %2034, %2028
  %2038 = fmul fast float %1881, %1878
  %2039 = fmul fast float %1881, %1879
  %2040 = fmul fast float %1881, %1880
  %2041 = fsub fast float %1878, %2038
  %2042 = fsub fast float %1879, %2039
  %2043 = fsub fast float %1880, %2040
  %2044 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %2045 = extractvalue %dx.types.CBufRet.f32 %2044, 3
  %2046 = fmul fast float %2045, %2041
  %2047 = fmul fast float %2045, %2042
  %2048 = fmul fast float %2045, %2043
  %2049 = extractvalue %dx.types.CBufRet.f32 %2044, 0
  %2050 = extractvalue %dx.types.CBufRet.f32 %2044, 1
  %2051 = extractvalue %dx.types.CBufRet.f32 %2044, 2
  %2052 = fadd fast float %2046, %2049
  %2053 = fadd fast float %2047, %2050
  %2054 = fadd fast float %2048, %2051
  %2055 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %2056 = extractvalue %dx.types.CBufRet.f32 %2055, 3
  %2057 = fmul fast float %2056, %2035
  %2058 = fmul fast float %2056, %2036
  %2059 = fmul fast float %2056, %2037
  %2060 = extractvalue %dx.types.CBufRet.f32 %2055, 0
  %2061 = extractvalue %dx.types.CBufRet.f32 %2055, 1
  %2062 = extractvalue %dx.types.CBufRet.f32 %2055, 2
  %2063 = fadd fast float %2057, %2060
  %2064 = fadd fast float %2058, %2061
  %2065 = fadd fast float %2059, %2062
  %2066 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %2067 = extractvalue %dx.types.CBufRet.f32 %2066, 3
  %2068 = fcmp fast une float %2067, 0.000000e+00
  %2069 = fmul fast float %2063, 0x3FDCCCCCC0000000
  %2070 = fmul fast float %2064, 0x3FDCCCCCC0000000
  %2071 = fmul fast float %2065, 0x3FDCCCCCC0000000
  %2072 = fadd fast float %2069, %2052
  %2073 = fadd fast float %2070, %2053
  %2074 = fadd fast float %2071, %2054
  %2075 = select i1 %2068, float %2072, float %2052
  %2076 = select i1 %2068, float %2073, float %2053
  %2077 = select i1 %2068, float %2074, float %2054
  %2078 = select i1 %2068, float 0.000000e+00, float %2063
  %2079 = select i1 %2068, float 0.000000e+00, float %2064
  %2080 = select i1 %2068, float 0.000000e+00, float %2065
  %2081 = call float @dx.op.dot3.f32(i32 55, float %2078, float %2079, float %2080, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2082 = fmul fast float %2081, 0x3F40600000000000
  %2083 = fadd fast float %2082, 0x3FEFFCB940000000
  %2084 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2083)  ; FMax(a,b)
  %2085 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2086 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2087 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2085, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2088 = extractvalue %dx.types.ResRet.f32 %2087, 0
  %2089 = extractvalue %dx.types.ResRet.f32 %2087, 1
  %2090 = extractvalue %dx.types.ResRet.f32 %2087, 2
  %2091 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2092 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2091, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2093 = extractvalue %dx.types.ResRet.f32 %2092, 0
  %2094 = extractvalue %dx.types.ResRet.f32 %2092, 1
  %2095 = extractvalue %dx.types.ResRet.f32 %2092, 2
  %2096 = extractvalue %dx.types.ResRet.f32 %2092, 3
  %2097 = fmul fast float %2093, 2.000000e+00
  %2098 = fmul fast float %2094, 2.000000e+00
  %2099 = fmul fast float %2095, 2.000000e+00
  %2100 = fmul fast float %2096, 2.000000e+00
  %2101 = fadd fast float %2097, -1.000000e+00
  %2102 = fadd fast float %2098, -1.000000e+00
  %2103 = fadd fast float %2099, -1.000000e+00
  %2104 = fadd fast float %2100, -1.000000e+00
  %2105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2106 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2105, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2107 = extractvalue %dx.types.ResRet.f32 %2106, 0
  %2108 = extractvalue %dx.types.ResRet.f32 %2106, 1
  %2109 = extractvalue %dx.types.ResRet.f32 %2106, 2
  %2110 = extractvalue %dx.types.ResRet.f32 %2106, 3
  %2111 = fmul fast float %2107, 2.000000e+00
  %2112 = fmul fast float %2108, 2.000000e+00
  %2113 = fmul fast float %2109, 2.000000e+00
  %2114 = fmul fast float %2110, 2.000000e+00
  %2115 = fadd fast float %2111, -1.000000e+00
  %2116 = fadd fast float %2112, -1.000000e+00
  %2117 = fadd fast float %2113, -1.000000e+00
  %2118 = fadd fast float %2114, -1.000000e+00
  %2119 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2120 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2119, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2121 = extractvalue %dx.types.ResRet.f32 %2120, 0
  %2122 = extractvalue %dx.types.ResRet.f32 %2120, 1
  %2123 = extractvalue %dx.types.ResRet.f32 %2120, 2
  %2124 = extractvalue %dx.types.ResRet.f32 %2120, 3
  %2125 = fmul fast float %2121, 2.000000e+00
  %2126 = fmul fast float %2122, 2.000000e+00
  %2127 = fmul fast float %2123, 2.000000e+00
  %2128 = fmul fast float %2124, 2.000000e+00
  %2129 = fadd fast float %2125, -1.000000e+00
  %2130 = fadd fast float %2126, -1.000000e+00
  %2131 = fadd fast float %2127, -1.000000e+00
  %2132 = fadd fast float %2128, -1.000000e+00
  %2133 = fmul fast float %2088, 0x3FFBB67B80000000
  %2134 = fmul fast float %2133, %2101
  %2135 = fmul fast float %2133, %2102
  %2136 = fmul fast float %2133, %2103
  %2137 = fmul fast float %2088, 0x400EFBDC80000000
  %2138 = fmul fast float %2137, %2104
  %2139 = fmul fast float %2089, 0x3FFBB67B80000000
  %2140 = fmul fast float %2139, %2115
  %2141 = fmul fast float %2139, %2116
  %2142 = fmul fast float %2139, %2117
  %2143 = fmul fast float %2089, 0x400EFBDC80000000
  %2144 = fmul fast float %2143, %2118
  %2145 = fmul fast float %2090, 0x3FFBB67B80000000
  %2146 = fmul fast float %2145, %2129
  %2147 = fmul fast float %2145, %2130
  %2148 = fmul fast float %2145, %2131
  %2149 = fmul fast float %2090, 0x400EFBDC80000000
  %2150 = fmul fast float %2149, %2132
  %2151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2152 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2151, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2153 = extractvalue %dx.types.ResRet.f32 %2152, 0
  %2154 = extractvalue %dx.types.ResRet.f32 %2152, 1
  %2155 = extractvalue %dx.types.ResRet.f32 %2152, 2
  %2156 = extractvalue %dx.types.ResRet.f32 %2152, 3
  %2157 = fmul fast float %2153, 2.000000e+00
  %2158 = fmul fast float %2154, 2.000000e+00
  %2159 = fmul fast float %2155, 2.000000e+00
  %2160 = fmul fast float %2156, 2.000000e+00
  %2161 = fadd fast float %2157, -1.000000e+00
  %2162 = fadd fast float %2158, -1.000000e+00
  %2163 = fadd fast float %2159, -1.000000e+00
  %2164 = fadd fast float %2160, -1.000000e+00
  %2165 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2166 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2165, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2167 = extractvalue %dx.types.ResRet.f32 %2166, 0
  %2168 = extractvalue %dx.types.ResRet.f32 %2166, 1
  %2169 = extractvalue %dx.types.ResRet.f32 %2166, 2
  %2170 = extractvalue %dx.types.ResRet.f32 %2166, 3
  %2171 = fmul fast float %2167, 2.000000e+00
  %2172 = fmul fast float %2168, 2.000000e+00
  %2173 = fmul fast float %2169, 2.000000e+00
  %2174 = fmul fast float %2170, 2.000000e+00
  %2175 = fadd fast float %2171, -1.000000e+00
  %2176 = fadd fast float %2172, -1.000000e+00
  %2177 = fadd fast float %2173, -1.000000e+00
  %2178 = fadd fast float %2174, -1.000000e+00
  %2179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2180 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2179, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2181 = extractvalue %dx.types.ResRet.f32 %2180, 0
  %2182 = extractvalue %dx.types.ResRet.f32 %2180, 1
  %2183 = extractvalue %dx.types.ResRet.f32 %2180, 2
  %2184 = extractvalue %dx.types.ResRet.f32 %2180, 3
  %2185 = fmul fast float %2181, 2.000000e+00
  %2186 = fmul fast float %2182, 2.000000e+00
  %2187 = fmul fast float %2183, 2.000000e+00
  %2188 = fmul fast float %2184, 2.000000e+00
  %2189 = fadd fast float %2185, -1.000000e+00
  %2190 = fadd fast float %2186, -1.000000e+00
  %2191 = fadd fast float %2187, -1.000000e+00
  %2192 = fadd fast float %2188, -1.000000e+00
  %2193 = fmul fast float %2137, %2161
  %2194 = fmul fast float %2088, 0x4011E37860000000
  %2195 = fmul fast float %2194, %2162
  %2196 = fmul fast float %2137, %2163
  %2197 = fmul fast float %2143, %2175
  %2198 = fmul fast float %2089, 0x4011E37860000000
  %2199 = fmul fast float %2198, %2176
  %2200 = fmul fast float %2143, %2177
  %2201 = fmul fast float %2149, %2189
  %2202 = fmul fast float %2090, 0x4011E37860000000
  %2203 = fmul fast float %2202, %2190
  %2204 = fmul fast float %2149, %2191
  %2205 = fmul fast float %1875, %1875
  %2206 = fmul fast float %1876, %1876
  %2207 = fsub fast float %2205, %2206
  %2208 = fmul fast float %1876, 0xBFF05F8CE0000000
  %2209 = fmul fast float %1877, 0x3FF05F8CE0000000
  %2210 = fmul fast float %1875, 0xBFF05F8CE0000000
  %2211 = fmul fast float %1875, 0x3FEB756F20000000
  %2212 = fmul fast float %2211, %1876
  %2213 = fmul fast float %1876, 0xBFEB756F20000000
  %2214 = fmul fast float %2213, %1877
  %2215 = fmul fast float %1877, %1877
  %2216 = fmul fast float %2215, 0x3FE7C7ADC0000000
  %2217 = fadd fast float %2216, 0xBFCFB4E7C0000000
  %2218 = fmul fast float %1875, 0xBFEB756F20000000
  %2219 = fmul fast float %2218, %1877
  %2220 = call float @dx.op.dot4.f32(i32 56, float %2088, float %2134, float %2135, float %2136, float 0x3FEC5BF9E0000000, float %2208, float %2209, float %2210)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2221 = call float @dx.op.dot4.f32(i32 56, float %2138, float %2193, float %2195, float %2196, float %2212, float %2214, float %2217, float %2219)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2222 = fmul fast float %2207, 0x3FFA963680000000
  %2223 = fmul fast float %2222, %2088
  %2224 = fmul fast float %2223, %2164
  %2225 = fadd fast float %2220, %2224
  %2226 = fadd fast float %2225, %2221
  %2227 = call float @dx.op.dot4.f32(i32 56, float %2089, float %2140, float %2141, float %2142, float 0x3FEC5BF9E0000000, float %2208, float %2209, float %2210)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2228 = call float @dx.op.dot4.f32(i32 56, float %2144, float %2197, float %2199, float %2200, float %2212, float %2214, float %2217, float %2219)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2229 = fmul fast float %2222, %2089
  %2230 = fmul fast float %2229, %2178
  %2231 = fadd fast float %2227, %2230
  %2232 = fadd fast float %2231, %2228
  %2233 = call float @dx.op.dot4.f32(i32 56, float %2090, float %2146, float %2147, float %2148, float 0x3FEC5BF9E0000000, float %2208, float %2209, float %2210)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2234 = call float @dx.op.dot4.f32(i32 56, float %2150, float %2201, float %2203, float %2204, float %2212, float %2214, float %2217, float %2219)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2235 = fadd fast float %2234, %2233
  %2236 = fmul fast float %2222, %2090
  %2237 = fmul fast float %2236, %2192
  %2238 = fadd fast float %2235, %2237
  %2239 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2226)  ; FMax(a,b)
  %2240 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2232)  ; FMax(a,b)
  %2241 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2238)  ; FMax(a,b)
  %2242 = fmul fast float %2239, 0x3FD45F3060000000
  %2243 = fmul fast float %2240, 0x3FD45F3060000000
  %2244 = fmul fast float %2241, 0x3FD45F3060000000
  %2245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2246 = extractvalue %dx.types.CBufRet.f32 %2245, 0
  %2247 = extractvalue %dx.types.CBufRet.f32 %2245, 1
  %2248 = extractvalue %dx.types.CBufRet.f32 %2245, 2
  %2249 = fmul fast float %2242, %2246
  %2250 = fmul fast float %2243, %2247
  %2251 = fmul fast float %2244, %2248
  %2252 = icmp eq i32 %39, 0
  br i1 %2252, label %2369, label %2253

; <label>:2253                                    ; preds = %2023
  %2254 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 186)  ; CBufferLoadLegacy(handle,regIndex)
  %2255 = extractvalue %dx.types.CBufRet.f32 %2254, 1
  %2256 = fcmp fast une float %2255, 0.000000e+00
  br i1 %2256, label %2257, label %2296, !dx.controlflow.hints !73

; <label>:2257                                    ; preds = %2253
  %2258 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2259 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2258, %dx.types.Handle %2086, float %1954, float %1955, float %1956, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2260 = extractvalue %dx.types.ResRet.f32 %2259, 0
  %2261 = extractvalue %dx.types.ResRet.f32 %2259, 1
  %2262 = extractvalue %dx.types.ResRet.f32 %2259, 2
  %2263 = fmul fast float %2260, 2.000000e+00
  %2264 = fmul fast float %2261, 2.000000e+00
  %2265 = fmul fast float %2262, 2.000000e+00
  %2266 = fadd fast float %2263, -1.000000e+00
  %2267 = fadd fast float %2264, -1.000000e+00
  %2268 = fadd fast float %2265, -1.000000e+00
  %2269 = fmul fast float %2266, %2266
  %2270 = fmul fast float %2267, %2267
  %2271 = fadd fast float %2269, %2270
  %2272 = fmul fast float %2268, %2268
  %2273 = fadd fast float %2271, %2272
  %2274 = call float @dx.op.unary.f32(i32 24, float %2273)  ; Sqrt(value)
  %2275 = call float @dx.op.binary.f32(i32 35, float %2274, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2276 = fdiv fast float %2266, %2275
  %2277 = fdiv fast float %2267, %2275
  %2278 = fdiv fast float %2268, %2275
  %2279 = fsub fast float 1.000000e+00, %2274
  %2280 = fmul fast float %2279, %2279
  %2281 = fsub fast float 1.000000e+00, %2280
  %2282 = fsub fast float %1875, %2276
  %2283 = fsub fast float %1876, %2277
  %2284 = fsub fast float %1877, %2278
  %2285 = fmul fast float %2281, %2282
  %2286 = fmul fast float %2283, %2281
  %2287 = fmul fast float %2284, %2281
  %2288 = fadd fast float %2285, %2276
  %2289 = fadd fast float %2286, %2277
  %2290 = fadd fast float %2287, %2278
  %2291 = call float @dx.op.dot3.f32(i32 55, float %2276, float %2277, float %2278, float %1875, float %1876, float %1877)  ; Dot3(ax,ay,az,bx,by,bz)
  %2292 = call float @dx.op.unary.f32(i32 7, float %2291)  ; Saturate(value)
  %2293 = fsub fast float 1.000000e+00, %2292
  %2294 = fmul fast float %2293, %2281
  %2295 = fadd fast float %2294, %2292
  br label %2296

; <label>:2296                                    ; preds = %2257, %2253
  %2297 = phi float [ %2274, %2257 ], [ 1.000000e+00, %2253 ]
  %2298 = phi float [ %2295, %2257 ], [ 1.000000e+00, %2253 ]
  %2299 = phi float [ %2288, %2257 ], [ %1875, %2253 ]
  %2300 = phi float [ %2289, %2257 ], [ %1876, %2253 ]
  %2301 = phi float [ %2290, %2257 ], [ %1877, %2253 ]
  %2302 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2303 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2304 = extractvalue %dx.types.ResRet.f32 %2303, 0
  %2305 = extractvalue %dx.types.ResRet.f32 %2303, 1
  %2306 = extractvalue %dx.types.ResRet.f32 %2303, 2
  %2307 = extractvalue %dx.types.ResRet.f32 %2303, 3
  %2308 = call float @dx.op.dot4.f32(i32 56, float %2304, float %2305, float %2306, float %2307, float %2299, float %2300, float %2301, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2309 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2310 = extractvalue %dx.types.ResRet.f32 %2309, 0
  %2311 = extractvalue %dx.types.ResRet.f32 %2309, 1
  %2312 = extractvalue %dx.types.ResRet.f32 %2309, 2
  %2313 = extractvalue %dx.types.ResRet.f32 %2309, 3
  %2314 = call float @dx.op.dot4.f32(i32 56, float %2310, float %2311, float %2312, float %2313, float %2299, float %2300, float %2301, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2315 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2316 = extractvalue %dx.types.ResRet.f32 %2315, 0
  %2317 = extractvalue %dx.types.ResRet.f32 %2315, 1
  %2318 = extractvalue %dx.types.ResRet.f32 %2315, 2
  %2319 = extractvalue %dx.types.ResRet.f32 %2315, 3
  %2320 = call float @dx.op.dot4.f32(i32 56, float %2316, float %2317, float %2318, float %2319, float %2299, float %2300, float %2301, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2321 = fmul fast float %2300, %2299
  %2322 = fmul fast float %2301, %2300
  %2323 = fmul fast float %2301, %2301
  %2324 = fmul fast float %2301, %2299
  %2325 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2326 = extractvalue %dx.types.ResRet.f32 %2325, 0
  %2327 = extractvalue %dx.types.ResRet.f32 %2325, 1
  %2328 = extractvalue %dx.types.ResRet.f32 %2325, 2
  %2329 = extractvalue %dx.types.ResRet.f32 %2325, 3
  %2330 = call float @dx.op.dot4.f32(i32 56, float %2326, float %2327, float %2328, float %2329, float %2321, float %2322, float %2323, float %2324)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2331 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2332 = extractvalue %dx.types.ResRet.f32 %2331, 0
  %2333 = extractvalue %dx.types.ResRet.f32 %2331, 1
  %2334 = extractvalue %dx.types.ResRet.f32 %2331, 2
  %2335 = extractvalue %dx.types.ResRet.f32 %2331, 3
  %2336 = call float @dx.op.dot4.f32(i32 56, float %2332, float %2333, float %2334, float %2335, float %2321, float %2322, float %2323, float %2324)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2337 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2338 = extractvalue %dx.types.ResRet.f32 %2337, 0
  %2339 = extractvalue %dx.types.ResRet.f32 %2337, 1
  %2340 = extractvalue %dx.types.ResRet.f32 %2337, 2
  %2341 = extractvalue %dx.types.ResRet.f32 %2337, 3
  %2342 = call float @dx.op.dot4.f32(i32 56, float %2338, float %2339, float %2340, float %2341, float %2321, float %2322, float %2323, float %2324)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2343 = fmul fast float %2299, %2299
  %2344 = fmul fast float %2300, %2300
  %2345 = fsub fast float %2343, %2344
  %2346 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2302, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2347 = extractvalue %dx.types.ResRet.f32 %2346, 0
  %2348 = extractvalue %dx.types.ResRet.f32 %2346, 1
  %2349 = extractvalue %dx.types.ResRet.f32 %2346, 2
  %2350 = fmul fast float %2347, %2345
  %2351 = fmul fast float %2348, %2345
  %2352 = fmul fast float %2349, %2345
  %2353 = fadd fast float %2330, %2308
  %2354 = fadd fast float %2336, %2314
  %2355 = fadd fast float %2342, %2320
  %2356 = fadd fast float %2353, %2350
  %2357 = fadd fast float %2354, %2351
  %2358 = fadd fast float %2355, %2352
  %2359 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2356)  ; FMax(a,b)
  %2360 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2357)  ; FMax(a,b)
  %2361 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2358)  ; FMax(a,b)
  %2362 = fmul fast float %2298, %2297
  %2363 = fmul fast float %2362, %68
  %2364 = fmul fast float %2363, %2359
  %2365 = fmul fast float %2362, %69
  %2366 = fmul fast float %2365, %2360
  %2367 = fmul fast float %2362, %70
  %2368 = fmul fast float %2367, %2361
  br label %2369

; <label>:2369                                    ; preds = %2296, %2023
  %2370 = phi float [ %2364, %2296 ], [ 0.000000e+00, %2023 ]
  %2371 = phi float [ %2366, %2296 ], [ 0.000000e+00, %2023 ]
  %2372 = phi float [ %2368, %2296 ], [ 0.000000e+00, %2023 ]
  %2373 = fadd fast float %2370, %2249
  %2374 = fadd fast float %2371, %2250
  %2375 = fadd fast float %2372, %2251
  %2376 = call float @dx.op.dot3.f32(i32 55, float %2373, float %2374, float %2375, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2377 = fmul fast float %2373, %2075
  %2378 = fmul fast float %2374, %2076
  %2379 = fmul fast float %2375, %2077
  %2380 = fmul fast float %1878, 0x3F40600000000000
  %2381 = fadd fast float %2380, 0x3FEFFCB940000000
  %2382 = fmul fast float %1879, 0x3F40600000000000
  %2383 = fadd fast float %2382, 0x3FEFFCB940000000
  %2384 = fmul fast float %1880, 0x3F40600000000000
  %2385 = fadd fast float %2384, 0x3FEFFCB940000000
  %2386 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2381)  ; FMax(a,b)
  %2387 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2383)  ; FMax(a,b)
  %2388 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2385)  ; FMax(a,b)
  %2389 = fmul fast float %2377, %2386
  %2390 = fmul fast float %2378, %2387
  %2391 = fmul fast float %2379, %2388
  %2392 = fmul fast float %2078, 0x3FDCCCCCC0000000
  %2393 = fmul fast float %2079, 0x3FDCCCCCC0000000
  %2394 = fmul fast float %2080, 0x3FDCCCCCC0000000
  %2395 = fadd fast float %2075, %2392
  %2396 = fadd fast float %2076, %2393
  %2397 = fadd fast float %2077, %2394
  %2398 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 146)  ; CBufferLoadLegacy(handle,regIndex)
  %2399 = extractvalue %dx.types.CBufRet.f32 %2398, 1
  %2400 = fmul fast float %2399, %2395
  %2401 = fmul fast float %2399, %2396
  %2402 = fmul fast float %2399, %2397
  %2403 = call float @dx.op.binary.f32(i32 35, float %1777, float 0.000000e+00)  ; FMax(a,b)
  %2404 = call float @dx.op.binary.f32(i32 35, float %1778, float 0.000000e+00)  ; FMax(a,b)
  %2405 = call float @dx.op.binary.f32(i32 35, float %1779, float 0.000000e+00)  ; FMax(a,b)
  %2406 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2407 = extractvalue %dx.types.CBufRet.f32 %2406, 0
  %2408 = fcmp fast ogt float %2407, 0.000000e+00
  br i1 %2408, label %2409, label %2484, !dx.controlflow.hints !74

; <label>:2409                                    ; preds = %2369
  %2410 = add nsw i32 %1677, 1
  %2411 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2410, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2412 = extractvalue %dx.types.ResRet.f32 %2411, 0
  %2413 = extractvalue %dx.types.ResRet.f32 %2411, 1
  %2414 = extractvalue %dx.types.ResRet.f32 %2411, 2
  %2415 = add nsw i32 %1677, 18
  %2416 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2415, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2417 = extractvalue %dx.types.ResRet.f32 %2416, 0
  %2418 = extractvalue %dx.types.ResRet.f32 %2416, 1
  %2419 = extractvalue %dx.types.ResRet.f32 %2416, 2
  %2420 = add nsw i32 %1677, 17
  %2421 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2420, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2422 = extractvalue %dx.types.ResRet.f32 %2421, 3
  %2423 = add nsw i32 %1677, 24
  %2424 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2423, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2425 = extractvalue %dx.types.ResRet.f32 %2424, 3
  %2426 = add nsw i32 %1677, 25
  %2427 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2426, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2428 = extractvalue %dx.types.ResRet.f32 %2427, 3
  %2429 = add nsw i32 %1677, 31
  %2430 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1810, i32 %2429, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2431 = extractvalue %dx.types.ResRet.f32 %2430, 0
  %2432 = fsub fast float %41, %2412
  %2433 = fsub fast float %42, %2413
  %2434 = fsub fast float %43, %2414
  %2435 = fmul fast float %2432, 2.097152e+06
  %2436 = fmul fast float %2433, 2.097152e+06
  %2437 = fmul fast float %2434, 2.097152e+06
  %2438 = fadd fast float %2435, %1684
  %2439 = fsub fast float %2438, %2417
  %2440 = fadd fast float %2436, %1685
  %2441 = fsub fast float %2440, %2418
  %2442 = fadd fast float %2437, %1686
  %2443 = fsub fast float %2442, %2419
  %2444 = call float @dx.op.unary.f32(i32 6, float %2439)  ; FAbs(value)
  %2445 = call float @dx.op.unary.f32(i32 6, float %2441)  ; FAbs(value)
  %2446 = call float @dx.op.unary.f32(i32 6, float %2443)  ; FAbs(value)
  %2447 = fadd fast float %2422, 1.000000e+00
  %2448 = fadd fast float %2425, 1.000000e+00
  %2449 = fadd fast float %2428, 1.000000e+00
  %2450 = fcmp fast ogt float %2444, %2447
  %2451 = fcmp fast ogt float %2445, %2448
  %2452 = fcmp fast ogt float %2446, %2449
  %2453 = or i1 %2450, %2451
  %2454 = or i1 %2453, %2452
  br i1 %2454, label %2455, label %2468

; <label>:2455                                    ; preds = %2409
  %2456 = fadd fast float %1685, %1684
  %2457 = fadd fast float %41, %42
  %2458 = fadd fast float %2456, %1686
  %2459 = fadd fast float %2457, %43
  %2460 = fmul fast float %2458, 0x3F52E83A20000000
  %2461 = fmul fast float %2459, 0x40A2E83A20000000
  %2462 = call float @dx.op.unary.f32(i32 22, float %2461)  ; Frc(value)
  %2463 = fadd fast float %2462, %2460
  %2464 = call float @dx.op.unary.f32(i32 22, float %2463)  ; Frc(value)
  %2465 = fcmp fast ogt float %2464, 5.000000e-01
  %2466 = uitofp i1 %2465 to float
  %2467 = fsub fast float 1.000000e+00, %2466
  br label %2484

; <label>:2468                                    ; preds = %2409
  %2469 = fcmp fast ogt float %2431, 0.000000e+00
  br i1 %2469, label %2470, label %2484

; <label>:2470                                    ; preds = %2468
  %2471 = fsub fast float %1671, %1674
  %2472 = fsub fast float %1672, %1675
  %2473 = fsub fast float %1673, %1676
  %2474 = call float @dx.op.unary.f32(i32 6, float %2471)  ; FAbs(value)
  %2475 = call float @dx.op.unary.f32(i32 6, float %2472)  ; FAbs(value)
  %2476 = call float @dx.op.unary.f32(i32 6, float %2473)  ; FAbs(value)
  %2477 = call float @dx.op.binary.f32(i32 35, float %2475, float %2476)  ; FMax(a,b)
  %2478 = call float @dx.op.binary.f32(i32 35, float %2474, float %2477)  ; FMax(a,b)
  %2479 = fsub fast float %2478, %2431
  %2480 = call float @dx.op.unary.f32(i32 6, float %2479)  ; FAbs(value)
  %2481 = fmul fast float %2480, 2.000000e+01
  %2482 = call float @dx.op.unary.f32(i32 7, float %2481)  ; Saturate(value)
  %2483 = fsub fast float 1.000000e+00, %2482
  br label %2484

; <label>:2484                                    ; preds = %2470, %2468, %2455, %2369
  %2485 = phi float [ %2467, %2455 ], [ %2483, %2470 ], [ %2403, %2468 ], [ %2403, %2369 ]
  %2486 = phi float [ 1.000000e+00, %2455 ], [ 0.000000e+00, %2470 ], [ %2404, %2468 ], [ %2404, %2369 ]
  %2487 = phi float [ %2466, %2455 ], [ %2483, %2470 ], [ %2405, %2468 ], [ %2405, %2369 ]
  %2488 = fadd fast float %2400, %2389
  %2489 = fadd fast float %2401, %2390
  %2490 = fadd fast float %2402, %2391
  %2491 = fadd fast float %2488, %2485
  %2492 = fadd fast float %2489, %2486
  %2493 = fadd fast float %2490, %2487
  %2494 = fmul fast float %36, 7.812500e-03
  %2495 = fmul fast float %37, 7.812500e-03
  %2496 = call float @dx.op.unary.f32(i32 22, float %2494)  ; Frc(value)
  %2497 = call float @dx.op.unary.f32(i32 22, float %2495)  ; Frc(value)
  %2498 = fmul fast float %2496, 1.280000e+02
  %2499 = fmul fast float %2497, 1.280000e+02
  %2500 = fadd fast float %2498, 0xC05015CCC0000000
  %2501 = fadd fast float %2499, 0xC0521DCCC0000000
  %2502 = fmul fast float %2500, %2500
  %2503 = fmul fast float %2501, %2501
  %2504 = fmul fast float %2501, %2500
  %2505 = call float @dx.op.dot3.f32(i32 55, float %2502, float %2503, float %2504, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2506 = call float @dx.op.unary.f32(i32 22, float %2505)  ; Frc(value)
  %2507 = fadd fast float %2506, -5.000000e-01
  %2508 = fmul fast float %2376, %2084
  %2509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2510 = extractvalue %dx.types.CBufRet.f32 %2509, 1
  %2511 = fmul fast float %2508, %2510
  %2512 = fadd fast float %2511, 3.906250e-03
  %2513 = call float @dx.op.unary.f32(i32 23, float %2512)  ; Log(value)
  %2514 = fmul fast float %2513, 6.250000e-02
  %2515 = fmul fast float %2507, 0x3F70101020000000
  %2516 = fadd fast float %2515, 5.000000e-01
  %2517 = fadd fast float %2516, %2514
  %2518 = fmul fast float %1875, 5.000000e-01
  %2519 = fmul fast float %1876, 5.000000e-01
  %2520 = fmul fast float %1877, 5.000000e-01
  %2521 = fadd fast float %2518, 5.000000e-01
  %2522 = fadd fast float %2519, 5.000000e-01
  %2523 = fadd fast float %2520, 5.000000e-01
  %2524 = fmul fast float %2510, %2491
  %2525 = fmul fast float %2510, %2492
  %2526 = fmul fast float %2510, %2493
  %2527 = call float @dx.op.binary.f32(i32 36, float %2524, float 3.225600e+04)  ; FMin(a,b)
  %2528 = call float @dx.op.binary.f32(i32 36, float %2525, float 3.225600e+04)  ; FMin(a,b)
  %2529 = call float @dx.op.binary.f32(i32 36, float %2526, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2527)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %2528)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %2529)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %2521)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %2522)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %2523)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1964)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1881)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1882)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1883)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3F70101020000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1878)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1879)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1880)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %2517)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %2024)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %2025)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %2026)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %2027)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %1973)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!43}
!dx.entryPoints = !{!44}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !31, !36}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 4, i32 0, !9}
!15 = !{i32 7, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 4, i32 0, !9}
!16 = !{i32 8, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 4, i32 0, !9}
!17 = !{i32 9, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 4, i32 0, !9}
!18 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !19}
!19 = !{i32 1, i32 16}
!20 = !{i32 11, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !19}
!21 = !{i32 12, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !19}
!22 = !{i32 13, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 12, i32 0, !19}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 17, i32 1, i32 11, i32 0, null}
!27 = !{i32 18, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 18, i32 1, i32 11, i32 0, null}
!28 = !{i32 19, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !7}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{!32, !33, !34, !35}
!32 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5388, null}
!33 = !{i32 1, %hostlayout.UniformBufferConstants_OpaqueBasePass* undef, !"", i32 0, i32 1, i32 1, i32 2428, null}
!34 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 180, null}
!35 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 188, null}
!36 = !{!37, !38, !39, !40, !41, !42}
!37 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!38 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!39 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!40 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!41 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!42 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!43 = !{[10 x i32] [i32 8, i32 28, i32 0, i32 0, i32 0, i32 0, i32 17823735, i32 17823735, i32 0, i32 0]}
!44 = !{void ()* @MainPS, !"MainPS", !45, !4, !66}
!45 = !{!46, !53, null}
!46 = !{!47, !49, !50, !52}
!47 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !48, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!48 = !{i32 0}
!49 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !48, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!50 = !{i32 2, !"SV_Position", i8 9, i8 3, !48, i8 4, i32 1, i8 4, i32 1, i8 0, !51}
!51 = !{i32 3, i32 3}
!52 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !48, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!53 = !{!54, !56, !58, !60, !62, !64}
!54 = !{i32 0, !"SV_Target", i8 9, i8 16, !48, i8 0, i32 1, i8 4, i32 0, i8 0, !55}
!55 = !{i32 3, i32 15}
!56 = !{i32 1, !"SV_Target", i8 9, i8 16, !57, i8 0, i32 1, i8 4, i32 1, i8 0, !55}
!57 = !{i32 1}
!58 = !{i32 2, !"SV_Target", i8 9, i8 16, !59, i8 0, i32 1, i8 4, i32 2, i8 0, !55}
!59 = !{i32 2}
!60 = !{i32 3, !"SV_Target", i8 9, i8 16, !61, i8 0, i32 1, i8 4, i32 3, i8 0, !55}
!61 = !{i32 3}
!62 = !{i32 4, !"SV_Target", i8 9, i8 16, !63, i8 0, i32 1, i8 4, i32 4, i8 0, !55}
!63 = !{i32 4}
!64 = !{i32 5, !"SV_Target", i8 9, i8 16, !65, i8 0, i32 1, i8 4, i32 6, i8 0, !55}
!65 = !{i32 6}
!66 = !{i32 0, i64 16, i32 5, !48}
!67 = distinct !{!67, !"dx.controlflow.hints", i32 1}
!68 = distinct !{!68, !"dx.controlflow.hints", i32 1}
!69 = distinct !{!69, !"dx.controlflow.hints", i32 1}
!70 = distinct !{!70, !"dx.controlflow.hints", i32 2}
!71 = distinct !{!71, !"dx.controlflow.hints", i32 1}
!72 = distinct !{!72, !"dx.controlflow.hints", i32 1}
!73 = distinct !{!73, !"dx.controlflow.hints", i32 1}
!74 = distinct !{!74, !"dx.controlflow.hints", i32 1}
